====================================
编写你的第一个 Django 程序，第一部分
====================================

让我们通过例子来学习。

在整个教程中，我们将循序渐进地创建一个基本的投票应用程序。

这个应用程序这将包括两部分：

    * 一个公共网站，用于查看投票内容和投票。
    * 一个管理员的网站，用于添加、修改和删除投票。

我们将假定您 :doc:`已经安装了 Django </intro/install>` 。你可以通过在 Pyhton 解释
器中输入 ``import django`` 来测试 Django 是否已经安装。如果该命令运行成功，没有
错误，那就表明 Django 已经安装好了。

.. admonition:: 从哪里得到帮助:

    如果您在学习本教程中遇到问题，请在  `django-users`__ 上发贴或在
    `#django on irc.freenode.net`__ 与其他可能会帮助您的 Django 用户交流。

__ http://groups.google.com/group/django-users
__ irc://irc.freenode.net/django

创建一个项目
==================

如果你第一次使用 Django ，那么必须进行一些初始设置。可以通过自动创建代码来建立
一个项目（ :term:`project` ）。一个 Django 项目是一个 Django 实例的设置的集合，
包括数据库配置， Django 的定义选项和程序定义的设置。

让我们通过命令行来进行。使用 ``cd`` 命令进入你要存放代码的目录，然后运行命令
``django-admin.py startproject mysite`` 。这样就会在当前目录中创建一个名为
``mysite`` 的目录。

.. admonition:: 代码名称可能因发行包不同而不同

   如果你是通过 Linux 包管理器（例如 apt-get 或 yum ）来安装 Django 的，那么
   ``django-admin.py`` 可能被改名为 ``django-admin`` 。在这种情况下本教程中的
   每个命令都要略去 ``.py`` 。

.. admonition:: Mac OS X 权限问题

    如果你使用的是 Mac OS X 操作系统，当你运行 ``django-admin.py startproject``
    命令时你可能会看到“无权运行”字样。这是因为象 OS X 这样以 Unix 为基础的系统
    中，一个文件只有在被赋予可执行权限后才能执行。要赋予执行权限的话，首先打开
    终端程序，使用 ``cd`` 命令进入 :doc:`django-admin.py </ref/django-admin>`
    所在的目录，然后执行 ``chmod +x django-admin.py`` 命令。

.. note::

    项目名称不能使用 python 或 Django 的保留字，如 ``django`` （这是 Django
    的保留字）或 ``test`` （与 Python 内建包重名）。

如果通过 ``python setup.py`` 命令安装 Django 的话，那么
:doc:`django-admin.py </ref/django-admin>` 应当在你的系统路径中。如果不在，那么
可以在 ``site-packages/django/bin`` 下找到。这里的 ``site-packages`` 是你的系统
中 Python 安装路径下的一个子目录。建议在你的路径中(如 :file:`/usr/local/bin` )
作一个 :doc:`django-admin.py </ref/django-admin>` 的链结。

.. admonition:: 代码应该放在哪里？

    如果你会PHP语言的话，你可能习惯于把代码放在 Web 服务器的文档根目录
    (如 ``/var/www`` )。而对于 Django ，你不应当这样把任何 Python 代码放 Web 服
    务器的文档根目录，因为这样做增加了人们窥视代码的风险，对系统安全不利。
    
    你应当把代码放在Web服务器的文档根目录 **之外** 的目录，如
    :file:`/home/mycode` 。

让我们来看看 :djadmin:`startproject` 创建了什么::

    mysite/
        __init__.py
        manage.py
        settings.py
        urls.py

文件说明：

    * :file:`__init__.py`: 一个空文件，用来告诉 Python 这个目录应该被当作一个
      Python包来看待。（如果你是一个 Python 新手请阅读 Python 官方文档中的
      `more about packages`_ 。）

    * :file:`manage.py`: 一个用于和 Django 项目交互的命令行工具。关于
      :file:`manage.py` 的详细说明参见 :doc:`/ref/django-admin` 。

    * settings.py: 这个 Django 项目的设置或配置文件。
      :doc:`/topics/settings` 一章可以告诉你所有设置如何工作。

    * urls.py: 这个 Django 项目的 URL 声明，好比一个 Django 项目网站的目录。
      更多关于 URL 的内容请看 :doc:`/topics/http/urls` 。

.. _more about packages: http://docs.python.org/tutorial/modules.html#packages

开发服务器
----------------------

让我们来试试能不能运行了。进入 :file:`mysite` 目录，
运行 ``python manage.py runserver`` 命令，你会看到如下输出::

    Validating models...
    0 errors found.

    Django version 1.0, using settings 'mysite.settings'
    Development server is running at http://127.0.0.1:8000/
    Quit the server with CONTROL-C.

这表明你启动了 Django 开发服务器。开发服务器是一个纯 Python 编写的轻型 Web
服务器。在正式发布前可以在开发服务器上便捷地进行程序开发工作，免去了配置生产器
（如 Apache ）的麻烦。

这里特别要提醒一点：不要在任何生产环境使用开发服务器。开发服务器只是为开
发而准备的。（我们这里专注于 Web 框架，而不是 Web 服务器。）

现在开发服务器正在运行，在浏览器中访问 http://127.0.0.1:8000/ 。你会看到一个赏
心悦目的淡蓝色的有 “ Welcome to Django” 字样的欢迎页面。这说明第一步成功了！

.. admonition:: 改变端口

    缺省情况下， :djadmin:`runserver` 命令使用内部IP和端口8000启动开发服务器。
    
    你可以通过命令行参数来改变端口。例如下面的命令在端口8080启动服务器:
    
    .. code-block:: bash
        
        python manage.py runserver 8080
        
    如果你要改变服务器的IP，可以把IP和端口一起作为参数传递。如果要开放给所有IP
    （当你要在别人电脑展示的工作时），你可以使用：

    .. code-block:: bash

        python manage.py runserver 0.0.0.0:8000
        
    开发服务器的全部文档请请访问  :djadmin:`runserver` 。

数据库设置
------------------

现在编辑 :file:`settings.py` 。这是一个 Python 模块文件，含有一些设置 Django
的模块变量。你可以改变如下的设置来匹配你的数据库连接参数：

    * :setting:`ENGINE` -- 可以是
      ``'django.db.backends.postgresql_psycopg2'`` 、
      ``'django.db.backends.mysql'`` 或 ``'django.db.backends.sqlite3'`` 。
      其他类型请访问 :setting:`引擎<ENGINE>` 。

    * :setting:`NAME` -- 数据库名称。如果你使用 SQLite ，那么数据库就
      是电脑中的一个文件， DATABASE_NAME 就应当是包含文件名的绝对路径。如果文件
      不存在，在第 一次同步数据库的时候会创建这个文件（下面有详细介绍）。
      
      在填写路径的时候，永远都要使用斜杠符号（“/”），就算是在 Windows 上也是如此
      （比如 ``C:/homes/user/mysite/sqlite3.db`` ）。

    * :setting:`USER` -- 访问数据库的用户名（ SQLite 下不使用）。

    * :setting:`PASSWORD` -- 访问数据库的密码（ SQLite 下不使用）。

    * :setting:`HOST` -- 数据库所在主机。如果你的数据库在同一台物理机
      器上这里留空（ SQLite 下不使用）。

如果你是个数据库新手，我们建议你使用SQLite（设置 :setting:`ENGINE` 为
``'django.db.backends.sqlite3'`` ）。 SQLite 包含在 Python2.5 及其后续版本中，
所以你不用再安装其他的任何东西。

.. note::

    如果你使用 PostgreSQL 或 MySQL ，请确认你已经创建了一个数据库。在你的数据库
    命令行下使用命令 "``CREATE DATABASE database_name;``" 即可。

    如果你使用SQLite，就什么都不用创建了,因为—数据库文件在需要的时候会自动创建。

在编辑 :file:`settings.py` 时，注意一下文件底部的 :setting:`INSTALLED_APPS`
设置。这个变量保存了在当前 Django 项目中可用的 Django 程序的名称。 Django 程序
可以在多个项目中复用，而且你可以把这些程序打包部署以供其他的程序调用。

默认情况下， :setting:`INSTALLED_APPS` 包含了以下的程序 ，都是 Django 自带的：

    * :mod:`django.contrib.auth` -- 认证系统

    * :mod:`django.contrib.contenttypes` -- 内容类型框架

    * :mod:`django.contrib.sessions` -- session 框架
    
    * :mod:`django.contrib.sites` -- 使用一个Django项目来管理多个站点的框架
      作为常用程序，它们都默认包含在配置文件中。

    * :mod:`django.contrib.messages` -- 消息框架

    * :mod:`django.contrib.staticfiles` -- 管理静态文件的框架

为方便起见，一般情况下一个项目都包含以上程序。

因为以上每个程序都至少用到了一个数据表，所以在使用这些程序之前我们要在数据库中
创建对应的数据表。执行下面的命令：

.. code-block:: bash

    python manage.py syncdb

:djadmin:`syncdb` 命令会查找 :file:`settings.py` 文件中的
:setting:`INSTALLED_APPS` 设置并根据该文件中的数据库设置创建所有必须的数据表。
每创建一个数据表的时候你都能看到对应的提示信息，并且系统还会提示你是否为认证系
统创建一个超级用户。请按照提示创建超级用户。

如果你感兴趣，可以进入到数据库命令行内，输入
``\dt`` （ PostgreSQL ） 、 ``SHOW TABLES;`` （ MySQL ） 
或者 ``.schema`` （ SQLite ）来显示 Django 创建的数据表。

.. admonition:: 为最低要求者所准备

    上面说道，默认的程序是为了方便共用包含进来的，但是不是所有人都需要它们。
    如果你一个都不需要，就在执行 :djadmin:`syncdb` 前将
    :setting:`INSTALLED_APPS` 内的这些程序注释掉或者直接删除。
    :djadmin:`syncdb` 只会为 :setting:`INSTALLED_APPS` 内的程序创建数据表。

.. _creating-models:

创建模型
==============

现在你的环境 -- 一个“项目” -- 就建立好了，可以开始正式的工作了。

每个用 Django 写成的程序都是由 Python 包组成的，这些包位于 `Python path`_ 中
并遵循一定的命名规范。 Django 有个工具能够自动生成程序的基本目录结构，所以你可以
专注于写代码而不是去创建目录。

.. admonition:: 项目 vs. 程序

    项目和程序之间有什么不同？一个程序是指一个实现一定功能的 Web 应用程序，
    如一个博客系统、一个公共记录的数据库或非常简单的投票程序。一个项目是一个
    特定 Web 网站的配置和应用程序的集合。一个项目可以包含多个程序，而一个程序
    可以在多个项目中使用。

你的程序可以放在 `Python path`_ 中的任何地方。在这个教程中，为了简便，我们会在
 :file:`mysite` 目录下创建我们的投票程序。

要创建程序，请确定现在位于 :file:`mysite` 目录下并输入以下命令：

.. code-block:: bash

    python manage.py startapp polls

这样做会创建一个 :file:`polls` 目录，结构如下所示::

    polls/
        __init__.py
        models.py
        views.py

这就是我们的投票程序的目录结构。

要在 Django 中开发一个有数据库的 Web 程序，第一步就是定义模型，即用元数据定义
数据库。

.. admonition:: 哲学

    模型是数据唯一的源头，它包含要保存的数据的最重要的东西：字段和行为。
    Django 遵循 :ref:`DRY 原则 <dry>` 。其目标是只在一处地方定义数据模型，而
    其他地方的相应东西会自动随之改变。

在我们简单的投票程序中，要创建两个模型：polls（投票）和choices（选择项）。每个
投票由一个问题和一个发布日期组成。每个选项包含两个字段：选择项的文本内容和得票
数。每个选择项都和一个投票相关联。

上述内容由一个简单的 Python 类来表现。编辑 :file:`polls/models.py` 文件，使它
成为如下内容::

    from django.db import models

    class Poll(models.Model):
        question = models.CharField(max_length=200)
        pub_date = models.DateTimeField('date published')

    class Choice(models.Model):
        poll = models.ForeignKey(Poll)
        choice = models.CharField(max_length=200)
        votes = models.IntegerField()

上面的代码简单明了。每个模型都是继承自 :class:`django.db.models.Model` 的子类。
每个模型都有一些的类变量，每个类变量都对应一个数据库字段。

每个字段表现为一个 :class:`~django.db.models.Field` 的实例，例如：字符串型字段
表现为 :class:`~django.db.models.CharField` ，日期时间型字符表现为
:class:`~django.db.models.DateTimeField` 。这样定义后， Django 就会知道每个字段
会保存何种类型的数据。

字段实例的名字（例如question或pub_date）就是这个字段名的值，这个名字是机器式的。
你会在 Python 代码中用到这个值，而在数据库中会把这个值作为表的列名。

可以使用字段实例的第一个参数来指定一个可读性名称。这个名称会用于 Django
的自省，并且用于代码的文档化。如果不设置这个这个参数， Django 就会使用机器式
名称。在本例中，我们只为 ``Poll.pub_date`` 定义了一个可读性名称。而模型中的
其他字段，机器式名称足以让人们理解它表示什么含义了。

有些字段类有必选参数。比如 :class:`~django.db.models.CharField` ，就必须指定
:attr:`~django.db.models.Field.max_length` 参数。这种参数不仅用于创建数据库，
同时也用于数据验证，稍后你就会看到。

最后，注意我们使用 :class:`~django.db.models.ForeignKey` 定义了一个关系。这会
告诉 Django 每个选择项只关联一个投票。 Django 支持所有数据库的关系：多对一、
多对多和一对一。

.. _`Python path`: http://docs.python.org/tutorial/modules.html#the-module-search-path

启用模型
=========

刚才的一小段模型代码给了 Django 许多信息。有了这些代码，Django能够：

    * 为程序创建数据库构造语句（ ``CREATE TABLE`` 语句）。
    * 给 Poll 和 Choice 对象创建数据库访问 API 。

但是，首先需要告诉我们的项目， ``polls`` 程序已经安装了。

.. admonition:: 哲学

    Django 程序是“插件式”的，即一个程序可以在多个项目中使用，并且还可以将程序
    打包分发，因为这些程序并不是被绑定到一个特定 Django 的安装环境中的。

再次编辑 :file:`settings.py` 文件，在 :setting:`INSTALLED_APPS` 中加入
``'polls'`` 。就像下面所显示的一样::


    INSTALLED_APPS = (
        'django.contrib.auth',
        'django.contrib.contenttypes',
        'django.contrib.sessions',
        'django.contrib.sites',
        'polls'
    )

这样 Django 就知道项目中包含了 ``polls`` 程序了。让我们执行另一条命令：

.. code-block:: bash

    python manage.py sql polls

你应该能够看到类似于下面的输出（ polls 程序的创建数据库表创建语句）：

.. code-block:: sql

    BEGIN;
    CREATE TABLE "polls_poll" (
        "id" serial NOT NULL PRIMARY KEY,
        "question" varchar(200) NOT NULL,
        "pub_date" timestamp with time zone NOT NULL
    );
    CREATE TABLE "polls_choice" (
        "id" serial NOT NULL PRIMARY KEY,
        "poll_id" integer NOT NULL REFERENCES "polls_poll" ("id"),
        "choice" varchar(200) NOT NULL,
        "votes" integer NOT NULL
    );
    COMMIT;

注意以下几点：

    * 实际输出的内容会根据你所使用的数据库有所不同。

    * 数据表的名字由程序的名字（ ``polls`` ）和模型的小写名字（ ``poll`` 和
      ``choice`` ）组成。（你可以重载这个行为。）

    * 主键（ ID ）是自动添加的（这个也可以重载）。

    * 根据命名规范， Django 会给外键字段加上 ``"_id"`` 。当然，你也可以重载这个
      行为。

    * 外键关系由 ``REFERENCES`` 语句显式声明。

    * 生成的语句会根据所使用的数据库不同而自动改变，所以对于数据库不同类型的
      字段，如 ``auto_increment`` （ MySQL ）、 ``serial`` （ PostgreSQL ）或
      ``integer primary key`` （ SQLite ）都会自动进行处理。在引用字段名称的
      时候也是自适应的——会使用双引号或单引号。本文的作者使用的是 PostgreSQL
      数据库，所以例子中输出的 是PostgreSQL 语法。

    * :djadmin:`sql` 命令并不会在数据库内执行 SQL 语句，而只是在屏幕上打印
      出来，以便让你了解 Django 认为应该执行什么样的 SQL 语句。如果你要执行，
      只需要复制一下，在数据库命令行下执行就可以了。但是，我们等会就能看到，
      Django 有更简单的方法来执行 SQL 。

如果你有兴趣，也可以执行以下命令：

    * :djadmin:`python manage.py validate <validate>` -- 检测在生成模型的时候
      是否有错误。

    * :djadmin:`python manage.py sqlcustom polls <sqlcustom>` -- 输出程序中定义
      的 :ref:`自定义 SQL 语句 <initial-sql>` 语句（比如表修改或表约束）。

    * :djadmin:`python manage.py sqlclear polls <sqlclear>` -- 根据有哪些表存在
      于数据库中，输出必要的 ``DROP TABLE`` 语句。

    * :djadmin:`python manage.py sqlindexes polls <sqlindexes>` -- 输出
      ``CREATE INDEX`` 语句。

    * :djadmin:`python manage.py sqlall polls <sqlall>` -- 组合输出所有
      :djadmin:`sql` 、 :djadmin:`sqlcustom` 、和 :djadmin:`sqlindexes` 命令
      的结果。

这些命令的输出结果能够帮助你理解在程序底层到底做了些什么工作。

现在，再次执行 :djadmin:`syncdb` 命令来创建模型对应的数据表：

.. code-block:: bash

    python manage.py syncdb

:djadmin:`syncdb` 命令会针对 :setting:`INSTALLED_APPS` 中所有的在数据库里没有
对应数据表的程序执行“ sqlall ”操作。这个操作根据你上一次执行 syncdb 的结果，为
项目中所有的程序创建对应的表、初始化数据并创建索引。 :djadmin:`syncdb` 你想调用
多少次就能调用多少次，而它只会创建数据库里还不存在的表。

想了解 ``manage.py`` 工具更多的功能，请阅读
:doc:`django-admin.py documentation </ref/django-admin>` 文档。

把玩 API
========

现在，进入到 Python 的命令行环境中，开始把玩一下 Django 免费提供的 API 吧。要进
入命令行，输入下面的命令：

.. code-block:: bash

    python manage.py shell

我们没有直接使用“ python ”命令进入命令行，因为 ``manage.py`` 会为你配置项目
环境。“配置环境”包括以下两点：


    * 在 ``sys.path`` 中加入 ``polls`` 。便捷起见，项目中所引用的模块都是以
      Python 的“点路径”的方式来表示（比如 ``'polls.models'`` ）。
      为了这个目的， ``polls`` 包就必须在包含在 ``sys.path`` 内。

      我们已经看到了一个例子： :setting:`INSTALLED_APPS` 就是一组用“点路径”方式
      表示的包的集合。

    * 设置 ``DJANGO_SETTINGS_MODULE`` 环境变量，这个变量会将 ``settings.py`` 的
      路径告诉 Django 。

.. admonition:: 忽略 manage.py

    如果你不想用 ``manage.py`` ，没问题。只要确定 ``mysite`` 和 ``polls`` 在
    Python 根级别路径下（例如 ``import mysite`` 和 ``import polls`` 都可以正常
    运行）并且在 ``mysite.settings`` 中设置 ``DJANGO_SETTINGS_MODULE`` 环境变量
    就行了。
    
    要了解更多的内容，请参考
    :doc:`django-admin.py documentation </ref/django-admin>`

在命令行状态下，我们来使用 :doc:`数据库 API </topics/db/queries>`::

    >>> from polls.models import Poll, Choice # 导入我们刚才写的两个模型类。

    # 系统中还没有投票。
    >>> Poll.objects.all()
    []

    # 创建一个新的投票。
    >>> import datetime
    >>> p = Poll(question="What's up?", pub_date=datetime.datetime.now())

    # 把对象保存到数据库中。你必须显式地调用save()。
    >>> p.save()

    # 现在对象有了一个ID。注意根据你使用的数据库类型，ID可能是"1L"而不是"1"。
    # 这没什么大不了的，这只不过表示你的数据库返回了一个长整数对象。
    >>> p.id
    1

    # 通过Python属性来显示数据库中的列。
    >>> p.question
    "What's up?"
    >>> p.pub_date
    datetime.datetime(2007, 7, 15, 12, 00, 53)

    # 改变属性值，然后调用save()。
    >>> p.pub_date = datetime.datetime(2007, 4, 1, 0, 0)
    >>> p.save()

    # objects.all() 显示所有数据库中的投票。
    >>> Poll.objects.all()
    [<Poll: Poll object>]


等等， ``<Poll: Poll object>`` 这样的形式绝对不是一个直白的表达方式。我们可以修
改模型的代码（在 ``polls/models.py`` 文件里），给 ``Poll`` 和 ``Choice`` 各加入
一个 :meth:`~django.db.models.Model.__unicode__` 方法来解决这个问题::

    class Poll(models.Model):
        # ...
        def __unicode__(self):
            return self.question

    class Choice(models.Model):
        # ...
        def __unicode__(self):
            return self.choice

给模型加上 :meth:`~django.db.models.Model.__unicode__` 方法是很重要的，不仅是为
了在命令行里保持思路清晰，而且会用于 Django 自动生成的管理界面里的内容

.. admonition:: 为什么使用 :meth:`~django.db.models.Model.__unicode__` 而不用
                :meth:`~django.db.models.Model.__str__` ？

    如果你熟悉 Python ，你可能有为你的类增加
    ：meth:`~django.db.models.Model.__str__` 方法的习惯而不会去使用
    :meth:`~django.db.models.Model.__unicode__` 方法。
    我们用 :meth:`~django.db.models.Model.__unicode__` 方法是因为 Django
    模型默认处理 Unicode 数据。当数据库里的数据返回时，它们全都会被转成
    Unicode 编码。

    Django 模型有个默认的 :meth:`~django.db.model.Model.__str__` 
    方法来调用 :meth:`~django.db.models.Model.__unicode__` 方法并将结果转换成
    UTF-8 格式。这意味着 ``unicode(p)`` 会返回 Unicode 字符串，而 ``str(p)``
    只会返回一个 UTF-8 编码的普通字符串。
    
    如果这些东西让你很困扰，那就只需要记住给模型类加入
    :meth:`~django.db.models.Model.__unicode__` 方法。幸运的话，这些代码会正常
    工作。

上面提到的都是常用 Python 方法。现在我们加上一个用于演示的自定义方法::

    import datetime
    # ...
    class Poll(models.Model):
        # ...
        def was_published_today(self):
            return self.pub_date.date() == datetime.date.today()
            
请注意增加了 ``import datetime`` 部分是为了引用 Python 的标准日期时间模块。

保存改变的文件，回到命令下重新运行 ``python manage.py shell`` 命令::

    >>> from polls.models import Poll, Choice

    # 验证我们的 __unicode__() 正常使用。
    >>> Poll.objects.all()
    [<Poll: What's up?>]

    # Django 提供多种关键字驱动的数据库查找 API 。
    >>> Poll.objects.filter(id=1)
    [<Poll: What's up?>]
    >>> Poll.objects.filter(question__startswith='What')
    [<Poll: What's up?>]

    # 查找 2007 年的投票。
    >>> Poll.objects.get(pub_date__year=2007)
    <Poll: What's up?>

    >>> Poll.objects.get(id=2)
    Traceback (most recent call last):
        ...
    DoesNotExist: Poll matching query does not exist.

    # 根据主键查找是最常用的，所以 Django 提供了一个主键精确查找的捷径。
    # 下面的 API 和 Poll.objects.get(id=1)完全相同。
    >>> Poll.objects.get(pk=1)
    <Poll: What's up?>

    # 验证自定义方法是否正常工作。
    >>> p = Poll.objects.get(pk=1)
    >>> p.was_published_today()
    False

    # 给投票增加一些选择项。这里调用 create 来构建一个新的 choice 对象，
    # 相当于在数据库中使用 INSERT 语句。把一个选择项添加到一个选择项集合中，
    # 并返回一个新的 choice 对象。 Django 创建一个集合来存放外键关系的
    # “另一边”，可以通过 API 来操作。
    >>> p = Poll.objects.get(pk=1)

    # 显示相关对象集合的选项（暂时为空）
    >>> p.choice_set.all()
    []

    # 创建三个选择项。
    >>> p.choice_set.create(choice='Not much', votes=0)
    <Choice: Not much>
    >>> p.choice_set.create(choice='The sky', votes=0)
    <Choice: The sky>
    >>> c = p.choice_set.create(choice='Just hacking again', votes=0)

    # 通过 Choice 对象的 API 访问相关的投票对象。
    >>> c.poll
    <Poll: What's up?>

    # 反之亦然：通过 Poll 对象也可以调用 Choice 对象。
    >>> p.choice_set.all()
    [<Choice: Not much>, <Choice: The sky>, <Choice: Just hacking again>]
    >>> p.choice_set.count()
    3

    # API 会自动追踪关系。使用双下划线来分隔关系。这个方法可以一直追踪下去，可以
    # 追踪任意层关系，没有限制。
    # 搜索 pub_date 为 2007 的投票的所有选择项。
    >>> Choice.objects.filter(poll__pub_date__year=2007)
    [<Choice: Not much>, <Choice: The sky>, <Choice: Just hacking again>]

    # 让我们使用 delete() 方法来删除其中一个选择项。
    >>> c = p.choice_set.filter(choice__startswith='Just hacking')
    >>> c.delete()

更多关于关系模型的信息参见 :doc:`操作关系对象 </ref/models/relations>` 。更多
关于如何使用双下划线来执行字段查询的信息参见 `Field lookups`__ 。要了解所有
数据库 API 细节，请查阅 :doc:`数据库 API 参考 </topics/db/queries>` 。

__ http://docs.djangoproject.com/en/1.2/topics/db/queries/#field-lookups

当你可以熟练使用 API 后，请阅读 :doc:`教程第二部分 </intro/tutorial02>` ，学习
自动创建 Django 管理程序。
