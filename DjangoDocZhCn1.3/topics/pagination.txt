==========
分页
==========

.. module:: django.core.paginator
   :synopsis: Classes to help you easily manage paginated data.

Django 提供了一些类来帮助你对数据进行分页，即使用“上一页、下一页”链接，把数据
显示在不同的页面上。这些类都位于 :file:`django/core/paginator.py` 中。

例子
=======

把一个对象列表和每页要显示的对象个数传递给 :class:`Paginator` ，就可以使用分页
的相关方法了::

    >>> from django.core.paginator import Paginator
    >>> objects = ['john', 'paul', 'george', 'ringo']
    >>> p = Paginator(objects, 2)

    >>> p.count
    4
    >>> p.num_pages
    2
    >>> p.page_range
    [1, 2]

    >>> page1 = p.page(1)
    >>> page1
    <Page 1 of 2>
    >>> page1.object_list
    ['john', 'paul']

    >>> page2 = p.page(2)
    >>> page2.object_list
    ['george', 'ringo']
    >>> page2.has_next()
    False
    >>> page2.has_previous()
    True
    >>> page2.has_other_pages()
    True
    >>> page2.next_page_number()
    3
    >>> page2.previous_page_number()
    1
    >>> page2.start_index() # 本页第一个条目的索引值，索引值由 1 开始。
    3
    >>> page2.end_index() # 本页最后一个条目的索引值，索引值由 1 开始。
    4

    >>> p.page(0)
    Traceback (most recent call last):
    ...
    EmptyPage: That page number is less than 1
    >>> p.page(3)
    Traceback (most recent call last):
    ...
    EmptyPage: That page contains no results

.. note::

    注意，传递给 ``Paginator`` 的可以是一个列表、元组、 Djanog ``查询集`` 或者
    任何有 ``count()`` 或 ``__len__()`` 方法的对象。当需要计算对象的数量时，
    ``Paginator`` 会首先尝试调用 ``count()`` ，如果没有 ``count()`` 方法可调用
    就会调用 ``__len__()`` 方法。这样，就可以优先使用效率更高的 ``count()``
    方法。


在视图中使用 ``Paginator``
==============================

下面是一个稍微复杂一点的例子，我们在视图中使用 :class:`Paginator` 来对查询集
进行分页。我们同时给出了视图和相应的模板来演示如何显示数据。这个例子假设有一个
已经导入的 ``Contacts`` 模型。

视图模型如下::

    from django.core.paginator import Paginator, InvalidPage, EmptyPage

    def listing(request):
        contact_list = Contacts.objects.all()
        paginator = Paginator(contact_list, 25) # 每页显示 25 个联系人

        # 确保请求显示的页码是一个整数。否则使用第 1 页。
        try:
            page = int(request.GET.get('page', '1'))
        except ValueError:
            page = 1

        # 如果页码超出了范围，则使用最后一页。
        try:
            contacts = paginator.page(page)
        except (EmptyPage, InvalidPage):
            contacts = paginator.page(paginator.num_pages)

        return render_to_response('list.html', {"contacts": contacts})

在模板 :file:`list.html` 中需要加入相应的导航代码::

    {% for contact in contacts.object_list %}
        {# Each "contact" is a Contact model object. #}
        {{ contact.full_name|upper }}<br />
        ...
    {% endfor %}

    <div class="pagination">
        <span class="step-links">
            {% if contacts.has_previous %}
                <a href="?page={{ contacts.previous_page_number }}">previous</a>
            {% endif %}

            <span class="current">
                Page {{ contacts.number }} of {{ contacts.paginator.num_pages }}.
            </span>

            {% if contacts.has_next %}
                <a href="?page={{ contacts.next_page_number }}">next</a>
            {% endif %}
        </span>
    </div>


``Paginator`` 对象
=====================

:class:`Paginator` 类构造器如下：

.. class:: Paginator(object_list, per_page, orphans=0, allow_empty_first_page=True)

必填参数
------------------

``object_list``
    一个列表、元组、 Djanog ``查询集`` 或者任何有 ``count()`` 或 ``__len__()``
    方法的对象。

``per_page``
    每页最大条目数，不包含孤儿条目（ ``orphans`` 参数说明见下）。

可选参数
------------------

``orphans``
    最后一页的最小条目值，缺省值为零。当你不希望最后一页只有很少的条目时可以
    使用这个参数。如果最后一页的条目数量小于等于 ``orphans`` 时，最后一页的条目
    就会与倒数第二页的条目合并显示，原来的倒数第二页就会变成最后一页。假设有
    23 个条目， ``per_page=10`` 且 ``orphans=3`` ，那么就会分成两页，第一页有十
    个条目，第二页（也是最后一页）有十三个条目。

``allow_empty_first_page``
    第一页是否可以为空。如果本参数值为 ``False`` 且 ``object_list`` 为空，那么
    就会引发一个 ``EmptyPage`` 错误。

方法
-------

.. method:: Paginator.page(number)

    根据给出的页码（一基索引），返回一个 :class:`Page` 对象。如果给出的页码不
    存在，就会引发 :exc:`InvalidPage` 。

属性
----------

.. attribute:: Paginator.count

    对象总数，包括所有页面。

    .. note::

        当判断 ``object_list`` 中对象的总数时， ``Paginator`` 会首先尝试调用
        ``object_list.count()`` 。如果 ``object_list`` 没有 ``count()`` 方法，
        那么 ``Paginator`` 会退而调用 ``object_list.__len__()`` 。这样可以保证
        优先使用效率较高的 ``count()`` 方法。

.. attribute:: Paginator.num_pages

    总页数。

.. attribute:: Paginator.page_range

    一基索引的页码范围，如 ``[1, 2, 3, 4]`` 。

``InvalidPage`` 例外
==========================

如果请求的页面非法（例如页码不是一个整数）或页面为空，那么 ``page()`` 方法会
引发 ``InvalidPage`` 。通常捕捉这个例外就够用了，但是如果你要更精确一点，那么
可以捕捉以下两个例外：

``PageNotAnInteger``
    给 ``page()`` 的值不是一个整数时引发。

``EmptyPage``
    给 ``page()`` 的值合法，但是页面为空。

以上两个例外都是 ``InvalidPage`` 子类，因此只需要使用一个简单的
``except InvalidPage`` 就可以同时处理上述两个例外了。


``Page`` 对象
================

.. class:: Page(object_list, number, paginator)

通常你会通过使用 :meth:`Paginator.page` 方法来得到 :class:`Pages <Page>` ，
不需要手动构造。

方法
-------

.. method:: Page.has_next()

    如果有下一页则返回 ``True`` 。

.. method:: Page.has_previous()

    如果有上一页则返回 ``True`` 。

.. method:: Page.has_other_pages()

    如果有上一页 *或* 下一页则返回 ``True`` 。

.. method:: Page.next_page_number()

    返回下一页的页码。注意不管下一页是否存在这个方法都会“笨笨地”返回下一页的
    页码。

.. method:: Page.previous_page_number()

    返回上一页的页码。注意不管上一页是否存在这个方法都会“笨笨地”返回上一页的
    页码。

.. method:: Page.start_index()

    返回本页第一个对象的一基索引。假设列表中共有五个对象，每页显示两个对象，
    那么每二页的 :meth:`~Page.start_index` 就会返回 ``3`` 。

.. method:: Page.end_index()

    返回本页最后一个对象的一基索引。假设列表中共有五个对象，每页显示两个对象，
    那么每二页的 :meth:`~Page.end_index` 就会返回 ``4`` 。

属性
----------

.. attribute:: Page.object_list

    本页的对象列表。

.. attribute:: Page.number

    本页的页码（一基索引）。

.. attribute:: Page.paginator

    相对应的 :class:`Paginator` 对象。
