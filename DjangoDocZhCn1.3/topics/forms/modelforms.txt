==========================
根据模型创建表单
==========================

.. module:: django.forms.models
   :synopsis: ModelForm and ModelFormset.

.. currentmodule:: django.forms

``ModelForm``
=============
.. class:: ModelForm

如果你正在编写一个数据库驱动的应用，那么你很可能需要一个与模型紧密联系的表单。
例如，假设你有一个 ``博客评论`` 模型，那么你就可能需要创建一个用于填写用户评论
的表单。在这种情况下，在表单中定义字段类型就显得多余了，因为在模型中已经对字段
作了定义。

因此， Django 提供一个可以根据模型来创建 ``表单`` 类的辅助类。

例如::

    >>> from django.forms import ModelForm

    # 创建表单类。
    >>> class ArticleForm(ModelForm):
    ...     class Meta:
    ...         model = Article

    # 创建一个表单来添加一篇文章。
    >>> form = ArticleForm()

    # 创建一个表单来修改一篇已存在的文章。
    >>> article = Article.objects.get(pk=1)
    >>> form = ArticleForm(instance=article)

字段类型
-----------

被创建的 ``表单`` 类会根据每个模型字段创建相应的表单字段。每种模型字段都有相应
缺省的表单字段。例如，模型中的 ``CharField`` 字段对应于表单中的 ``CharField``
字段，模型中的 ``ManyToManyField`` 字段对应表单中的 ``MultipleChoiceField``
字段。以下是字段对应的列表：

    ===============================  ========================================
    模型字段                         表单字段
    ===============================  ========================================
    ``AutoField``                    在表单中不出现

    ``BigIntegerField``              ``IntegerField`` ， ``min_value`` 为
                                     -9223372036854775808 且 ``max_value``
                                     为 9223372036854775807 。

    ``BooleanField``                 ``BooleanField``

    ``CharField``                    ``CharField`` ， ``max_length`` 设置为
                                     模型字段的 ``max_length``

    ``CommaSeparatedIntegerField``   ``CharField``

    ``DateField``                    ``DateField``

    ``DateTimeField``                ``DateTimeField``

    ``DecimalField``                 ``DecimalField``

    ``EmailField``                   ``EmailField``

    ``FileField``                    ``FileField``

    ``FilePathField``                ``CharField``

    ``FloatField``                   ``FloatField``

    ``ForeignKey``                   ``ModelChoiceField`` （参见下文）

    ``ImageField``                   ``ImageField``

    ``IntegerField``                 ``IntegerField``

    ``IPAddressField``               ``IPAddressField``

    ``ManyToManyField``              ``ModelMultipleChoiceField`` （参见下文）

    ``NullBooleanField``             ``CharField``

    ``PhoneNumberField``             ``USPhoneNumberField``
                                     （源于 ``django.contrib.localflavor.us`` ）

    ``PositiveIntegerField``         ``IntegerField``

    ``PositiveSmallIntegerField``    ``IntegerField``

    ``SlugField``                    ``SlugField``

    ``SmallIntegerField``            ``IntegerField``

    ``TextField``                    ``CharField`` ， ``widget=forms.Textarea``

    ``TimeField``                    ``TimeField``

    ``URLField``                     ``URLField`` ， ``verify_exists`` 与
                                     模型字段的 ``verify_exists`` 相同
    ===============================  ========================================

.. versionadded:: 1.2
    ``BigIntegerField`` 是 Django 1.2 中新增的。


正如你所期待的， ``ForeignKey`` 和 ``ManyToManyField`` 模型字段是特殊的::

    * ``ForeignKey`` 对应 ``django.forms.ModelChoiceField`` ，是一个选项为模型
      ``查询集`` 的 ``ChoiceField`` 。

    * ``ManyToManyField`` 对应 ``django.forms.ModelMultipleChoiceField`` ，是
      一个选项为模型 ``查询集`` 的 ``MultipleChoiceField`` 。

另外，每个被创建的表单字段都包含按下列方式设置的属性：

    * 如果模型字段有 ``blank=True`` ，那么表单字段的 ``required`` 设置为
      ``False`` ，否则设置为 ``required=True`` 。

    * 表单字段的 ``label`` 设置为模型字段的 ``verbose_name`` ，且首字母大写。

    * 表单字段的 ``help_text`` 设置为模型字段的 ``help_text`` 。

    * 如果模型字段有 ``choices`` 集，那么表单字段的 ``widget`` 会被设置为
      ``Select`` ，选项来自于模型字段的 ``choices`` 。选项一般会包含一个空白
      选项，并把这个空白选项作为缺省值。如果这个字段是必填项，那么就会限制用户
      必须选择一个选项。如果模型字段有 ``blank=False`` 属性并且有一个显示定义
      的 ``缺省值`` ，那么选项中就不会包含空白选项。（ ``缺省值`` 会在初始化时
      被选中。）

最后，请注意你可以重载给定模型字段相对应的表单字段。参见下面
`重载缺省的字段类型和控件`_ 。

一个完整的例子
--------------

假设有如下的模型::

    from django.db import models
    from django.forms import ModelForm

    TITLE_CHOICES = (
        ('MR', 'Mr.'),
        ('MRS', 'Mrs.'),
        ('MS', 'Ms.'),
    )

    class Author(models.Model):
        name = models.CharField(max_length=100)
        title = models.CharField(max_length=3, choices=TITLE_CHOICES)
        birth_date = models.DateField(blank=True, null=True)

        def __unicode__(self):
            return self.name

    class Book(models.Model):
        name = models.CharField(max_length=100)
        authors = models.ManyToManyField(Author)

    class AuthorForm(ModelForm):
        class Meta:
            model = Author

    class BookForm(ModelForm):
        class Meta:
            model = Book

依据以上模型，其中的 ``ModelForm`` 子类大致与以下的类相等。（唯一的区别在于
``save()`` 方法，这点稍后再谈）::

    class AuthorForm(forms.Form):
        name = forms.CharField(max_length=100)
        title = forms.CharField(max_length=3,
                    widget=forms.Select(choices=TITLE_CHOICES))
        birth_date = forms.DateField(required=False)

    class BookForm(forms.Form):
        name = forms.CharField(max_length=100)
        authors = forms.ModelMultipleChoiceField(queryset=Author.objects.all())

``is_valid()`` 方法和 ``errors``
----------------------------------------

.. versionchanged:: 1.2

第一次调用 ``is_valid()`` 或操作一个 ``ModelForm`` 的 ``errors`` 属性时总是会
触发表单验证，但是在 Django 1.2 版本中还会触发
:ref:`模型验证 <validating-objects>` 。这样会产生副作用：清理传递给
``ModelForm`` 构造器的模型。例如，在表单中调用 ``is_valid()`` 会把模型中所有
日期字段转换为真正在日期对象。

``save()`` 方法
---------------------

每个由 ``ModelForm`` 产生的表单都有一个 ``save()`` 方法，这个方法根据绑定到表单
的数据创建和保存数据库对象。一个 ``ModelForm`` 子类可以接受一个已存在的模型实例
作为关键字参数 ``instance`` 。如果实例存在，那么 ``save()`` 方法会更新这个实例；
否则会创建一个新的指定模型的实例::

    # 根据 POST 数据创建一个表单实例。
    >>> f = ArticleForm(request.POST)

    # 根据表单数据保存一个新文章对象。
    >>> new_article = f.save()

    # 创建一个表单来编辑已存在的文章。
    >>> a = Article.objects.get(pk=1)
    >>> f = ArticleForm(instance=a)
    >>> f.save()

    # 创建一个表单来编辑已存在的文章，但是使用 POST 数据来生成表单。
    >>> a = Article.objects.get(pk=1)
    >>> f = ArticleForm(request.POST, instance=a)
    >>> f.save()

注意，如果表单数据未通过验证，那么 ``save()`` 会引发一个 ``ValueError`` 。例如，
如果 form.errors 为 True ，那么就会引发。

``save()`` 方法接受一个可选关键字参数 ``commit`` ，这个参数要么是 ``True`` ，
要么是 ``False`` 。如果使用 ``commit=False`` 来调用 ``save()`` ，那么会返回一个
还没有被保存到数据库的对象。在这种情况下你可以自由决定如何调用 ``save()`` 方法。
这种情况主要用于在保存数据之前需要作一些处理的场合下，或者需要使用特殊的
:ref:`模型保存选项 <ref-models-force-insert>` 的场合下。 ``commit`` 缺省为
``True`` 。

当模型与另一个模型有多对多关系时，使用 ``commit=False`` 会产生副作用。在这种
情况下，当保存表单时， Django 不会立即保存为多对多关系的表单数据。这是因为当
数据没有保存进数据时是不可能为实例保存多对多数据的。

为了解决这个问题，每次当使用 ``commit=False`` 保存表单时， Django 会为
``ModelForm`` 子类增加一个 ``save_m2m()`` 方法。当手动保存表单产生的实例之后，
可以执行 ``save_m2m()`` 来保存多对多表单数据。例如::

    # 根据 POST 数据创建一个表单实例。
    >>> f = AuthorForm(request.POST)

    # 创建，但不保存新的作者实例。
    >>> new_author = f.save(commit=False)

    # 对作者作一定的修改。
    >>> new_author.some_field = 'some_value'

    # 保存新的实例。
    >>> new_author.save()

    # 现在，保存表单的多对多数据。
    >>> f.save_m2m()

只有当你使用 ``save(commit=False)`` 时才需要调用 ``save_m2m()`` 。如果你只是
使用一个简单的 ``save()`` ，那么表单的所有数据，包括多对多数据都会被保存，不
需要额外的调用其他方法。例如::

    # 根据 POST 数据创建一个表单实例。
    >>> a = Author()
    >>> f = AuthorForm(request.POST, instance=a)

    # 创建并保存新的作者实例。万事大吉。
    >>> new_author = f.save()

除子 ``save()`` 和 ``save_m2m()`` 方法， ``ModelForm`` 与其他表单完全一样。
例如， ``is_valid()`` 方法用于表单验证， ``is_multipart()`` 方法用于决定表单
是否需要多部分文件上传（亦决定是否必须向表单传递 ``request.FILES`` ），等等。
详见 :ref:`binding-uploaded-files` 。 

使用表单字段的子集
------------------------------------

在某些情况下，在表单中你可能只要使用所有模型字段中的一部分，即模型字段的子集。
有三种方法可以告诉 ``ModelForm`` 只使用模型字段的子集：

1. 在模型字段上设置 ``editable=False`` ，这样任何由 ``ModelForm`` 创建的表单都
   不会包含这个字段。

2. 使用 ``ModelForm`` 的内部 ``Meta`` 类的 ``fields`` 属性。这个属性应当是一个
   表单中要包含的字段的列表。这个列表决定表单中要出现哪些字段和这些字段的出场
   顺序。

3. 使用 ``ModelForm`` 的内部 ``Meta`` 类的 ``exclude`` 属性。这个属性应当是
   一个表单中要包含的字段的列表。如果定义了这个属性，那么列表中的字段就会被表单
   排除。

例如，你要一个 ``Author`` 模型（前文已定义）的相关表单，但是只包含 ``name`` 和
``title`` ，那么可以这样定义 ``fields`` 或 ``exclude`` ::

    class PartialAuthorForm(ModelForm):
        class Meta:
            model = Author
            fields = ('name', 'title')

    class PartialAuthorForm(ModelForm):
        class Meta:
            model = Author
            exclude = ('birth_date',)

因为作者模型只有三个字段： 'name' 、 'title' 和 'birth_date' ，所以上述两个表单
包含完全相同的字段。

.. note::

    当你用 ``ModelForm`` 创建一个表单时，如果定义了 ``fields`` 和 ``exclude`` ，
    那么在被创建的表单中没有出现的字段就不会被表单的 ``save()`` 保存。 Django
    不允许保存一个不完整的模型，因此如果模型有字段不允许为空，但是又没有为这个
    字段设置缺省值，当试图 ``save()`` 一个 ``ModelForm`` 时就会失败。为避免这种
    情况发生，模型中的必填字段应当在初始化时赋值::

        author = Author(title='Mr')
        form = PartialAuthorForm(request.POST, instance=author)
        form.save()

    或者你可以使用 ``save(commit=False)`` 并手动设置额外的必填字段::

        form = PartialAuthorForm(request.POST)
        author = form.save(commit=False)
        author.title = 'Mr'
        author.save()

    关于如何使用 ``save(commit=False)`` ，详见本文 `保存表单一节`_ 。

.. _保存表单一节: `save() 方法`_

重载缺省的字段类型和控件
---------------------------------------------

.. versionadded:: 1.2
 	``widgets`` 属性是 Django 1.2 版本新增的。

前文中提到缺省的 `字段类型`_ 一般是比较明智的。如果在模型有一个字段是
``DateField`` 那么一般在表单中就应该对应 ``DateField`` 。但是，
``ModelForm`` 是非常灵活的，你可以自己改变模型字段对应的表单字段类型和控件。

使用表单类内置的 ``Meta`` 类的 ``widgets`` 属性可以自定义表单控件。这个属性应当
是一个字段名和控件类或实例相对应的字典。

例如，假设 ``Author`` 的 ``name`` 是一个 ``CharField`` ，你想要把原来缺省对应的
``<input type="text">`` 改变为 ``<textarea>`` ，可以这样来重载控件::

    from django.forms import ModelForm, Textarea

    class AuthorForm(ModelForm):
        class Meta:
            model = Author
            fields = ('name', 'title', 'birth_date')
            widgets = {
                'name': Textarea(attrs={'cols': 80, 'rows': 20}),
            }

``widgets`` 字典可以接受控件实例（如： ``Textarea(...)`` ），也可以接受类（如：
``Textarea`` ）。

如果你想要更进一步自定义一个字段，包括它的类型或标签等等，那么可以像一般的
表单类一样声明指定字段。声明的字段会重载 ``model`` 属性产生的缺省的字段。

例如，假设想要对 ``pub_date`` 使用 ``MyDateFormField`` ，可以如下操作::

    class ArticleForm(ModelForm):
        pub_date = MyDateFormField()

        class Meta:
            model = Article

如何想要重载一个字段的缺省标签，可以在声明表单字段时指定 ``label`` 参数::

   >>> class ArticleForm(ModelForm):
   ...     pub_date = DateField(label='Publication date')
   ...
   ...     class Meta:
   ...         model = Article

.. note::

    如果你象这样显示地初始化一个表单字段，那么 Django 会假定你想要完全自定义其
    行为，因此该字段的缺省属性（如 ``max_length`` 和 ``require`` ）就不会从模型
    中转移过来。如果你想要获得模型中定义的相关行为，那么就必须在声明表单字段时
    显示地定义。

    例如，有如下 ``Article`` 模型::

        class Article(models.Model):
            headline = models.CharField(max_length=200, null=True, blank=True,
                                        help_text="Use puns liberally")
            content = models.TextField()

    你要对 ``headline`` 做一些自定义的验证，同时又想保持 ``blank`` 和
    ``help_text`` 和模型中定义的一致，就应当这样定义 ``ArticleForm``::

        class ArticleForm(ModelForm):
            headline = MyFormField(max_length=200, required=False,
                                   help_text="Use puns liberally")

            class Meta:
                model = Article

    关于字段及其参数详见 :doc:`表单字段文档 </ref/forms/fields>` 。

改变字段的顺序
----------------------------

缺省情况下 ``ModelForm`` 会按模型中的字段顺序来排列表单字段，并且把
``多对多字段`` 放在最后面。如果你想要改变表单字段的顺序，可以使用 ``Meta`` 的
``fields`` 属性。

``fields`` 属性定义要显示的字段，并且可以定义字段显示的顺序。例如，有如下的
模型::

    class Book(models.Model):
        author = models.ForeignKey(Author)
        title = models.CharField(max_length=100)

``author`` 字段会第一个显示。如果要把它放在标题字段后面显示，那么可以按如下方式
使用 ``ModelForm``::

    >>> class BookForm(ModelForm):
    ...     class Meta:
    ...         model = Book
    ...         fields = ('title', 'author')

.. _overriding-modelform-clean-method:

重载 clean() 方法
-----------------------------

和普通表单一样，模型表单可以重载 ``clean()`` 方法来提供额外的验证。

就这点而言，模型表单与普通表单相比有两个特性：

缺省情况下， ``clean()`` 方法会验证标记 ``unique`` 、 ``unique_together`` 或
``unique_for_date|month|year`` 的字段的唯一性。因此，如果在重载 ``clean()``
方法后仍要维持缺省的验证，那么就必须调用父类的 ``clean()`` 方法。

同时，一个绑定模型对象的模型表单会包含一个
``self.instance`` 属性，这个属性用于给模型表单操作绑定的模型实例。

表单继承
----------------

和普通表单一样，可以通过继承来扩展和重用 ``ModelForm`` 。继承的好处是可以不
改变父类而添加额外的字段或方法。例如，我们使用前面的 ``ArticleForm`` 类::

    >>> class EnhancedArticleForm(ArticleForm):
    ...     def clean_pub_date(self):
    ...         ...

这样可以创建一个与 ``ArticleForm`` 一致的表单，并给 ``pub_date`` 字段添加一些
验证和清理。

如果要改变 ``Meta.fields`` 或 ``Meta.excludes`` 列表，那么还可以继承父类内置的
``Meta`` 类::

    >>> class RestrictedArticleForm(EnhancedArticleForm):
    ...     class Meta(ArticleForm.Meta):
    ...         exclude = ('body',)

这样为 ``EnhancedArticleForm`` 添加了额外的方法，并且修改了原来的
``ArticleForm.Meta`` ，去除了一个字段。

但是有许多东西要注意。

 * 这里适用变通的 Python 命名规则。如果有多个基类声明了 ``Meta`` ，那么只有第一
   个有效。也就是说子类如果声明了，子类的有效。否则第一个父类的有效。以此类推。

 * 因为技术原因，一个子类不能同时继承自一个 ``ModelForm`` 和一个 ``Form`` 。

如果不是非常复杂的继承，以上注意点可能和你无关。

与模型验证互动
---------------------------------

作为验证进程的一部分， ``ModelForm`` 会调用每个模型表单中出现的表单字段相对应的
模型字段的  ``clean()`` 方法。也就是说，表单中没有出现的字段那么就不同进行验证。
关于字段的清理和验证详见 :doc:`表单验证 </ref/forms/validation>` 文档。同时，
模型的 ``clean()`` 方法调用会先于唯一性检验。关于模型的 ``clean()`` 钩子详见
:ref:`验证对象 <validating-objects>` 。

.. _model-formsets:

模型表单集
==============

象 :doc:`普通表单集 </topics/forms/formsets>` 一样， Django 提供了一堆强大的
表单集类来更方便地使用模型。让我们继续使用前面的 ``Author`` 模型::

    >>> from django.forms.models import modelformset_factory
    >>> AuthorFormSet = modelformset_factory(Author)

和普通的表单集一样，这样就可以创建 ``Author`` 相关联的模型表单集了::

    >>> formset = AuthorFormSet()
    >>> print formset
    <input type="hidden" name="form-TOTAL_FORMS" value="1" id="id_form-TOTAL_FORMS" /><input type="hidden" name="form-INITIAL_FORMS" value="0" id="id_form-INITIAL_FORMS" /><input type="hidden" name="form-MAX_NUM_FORMS" id="id_form-MAX_NUM_FORMS" />
    <tr><th><label for="id_form-0-name">Name:</label></th><td><input id="id_form-0-name" type="text" name="form-0-name" maxlength="100" /></td></tr>
    <tr><th><label for="id_form-0-title">Title:</label></th><td><select name="form-0-title" id="id_form-0-title">
    <option value="" selected="selected">---------</option>
    <option value="MR">Mr.</option>
    <option value="MRS">Mrs.</option>
    <option value="MS">Ms.</option>
    </select></td></tr>
    <tr><th><label for="id_form-0-birth_date">Birth date:</label></th><td><input type="text" name="form-0-birth_date" id="id_form-0-birth_date" /><input type="hidden" name="form-0-id" id="id_form-0-id" /></td></tr>

.. note::
    ``modelformset_factory`` 使用 ``formset_factory`` 来生成表单集。也就是说
    模型表单集是普通表单集的针对某个特定模型的扩展。

改变查询集
---------------------

缺省情况下，当你从一个模型创建一个表单集时，表单集会使用一个包括所有模型对象的
查询集（如 ``Author.objects.all()`` ）。可以通过使用 ``queryset`` 参数来重载这
个行为::

    >>> formset = AuthorFormSet(queryset=Author.objects.filter(name__startswith='O'))

另外，可以创建一个子类，在 ``__init__`` 中设置 ``self.queryset``::

    from django.forms.models import BaseModelFormSet

    class BaseAuthorFormSet(BaseModelFormSet):
        def __init__(self, *args, **kwargs):
            super(BaseAuthorFormSet, self).__init__(*args, **kwargs)
            self.queryset = Author.objects.filter(name__startswith='O')

然后，把 ``BaseAuthorFormSet`` 类传递给工厂函数::

    >>> AuthorFormSet = modelformset_factory(Author, formset=BaseAuthorFormSet)

如果想要返回一个不包括 *任何* 既存模型实例的表单集，那么可以定义一个空查询集::

   >>> AuthorFormSet(queryset=Author.objects.none())


使用 ``fields`` 和 ``exclude`` 来控制使用哪些字段
-----------------------------------------------------------------

缺省情况下，一个模型表单集使用模型中的所有字段，标记有 ``editable=False`` 的
字段除外。但是这种方式可以在表单集级别重载::

    >>> AuthorFormSet = modelformset_factory(Author, fields=('name', 'title'))

使用 ``fields`` 可以设置只使用哪些字段。另一方面也可以使用“排除”机制来设置不
需要哪些字段::

    >>> AuthorFormSet = modelformset_factory(Author, exclude=('birth_date',))

.. _saving-objects-in-the-formset:

在表单集中保存对象
-----------------------------

和 ``ModelForm`` 一样，你可以用表单集的 ``save()`` 方法来保存数据::

    # 通过 POST 数据创建一个表单集实例。
    >>> formset = AuthorFormSet(request.POST)

    # 假设验证通过，保存数据。
    >>> instances = formset.save()

``save()`` 方法返回已保存到数据库中的实例。如果一个给定的实例的数据没有因为绑定
的数据改变而改变，那么这个实例不会保存到数据库中，并且也不会包含在返回值中（上
面的例子中返回值是 ``instances`` ）。

传递 ``commit=False`` 参数会返回未保存的模型实例::

    # 不保存到数据库
    >>> instances = formset.save(commit=False)
    >>> for instance in instances:
    ...     # 对实例作一些操作
    ...     instance.save()

这样可以在实例保存到数据库前作一些额外的操作。如果表单集包含一个
``多对多字段`` ，那么需要调用 ``formset.save_m2m()`` 来确保多对多关系被正确地
保存。

.. _model-formsets-max-num:

限制可编辑对象的数量
---------------------------------------

.. versionchanged:: 1.2

和普通的表单集一样，可以在 ``modelformset_factory`` 中使用 ``max_num`` 和
``extra`` 参数来限制表单显示的数量。

``max_num`` 不会阻止显示已存在的对象::

    >>> Author.objects.order_by('name')
    [<Author: Charles Baudelaire>, <Author: Paul Verlaine>, <Author: Walt Whitman>]

    >>> AuthorFormSet = modelformset_factory(Author, max_num=1)
    >>> formset = AuthorFormSet(queryset=Author.objects.order_by('name'))
    >>> [x.name for x in formset.get_queryset()]
    [u'Charles Baudelaire', u'Paul Verlaine', u'Walt Whitman']

如果 ``max_num`` 的值大于已存在的对象数量，那么最多会有 ``extra`` 数量的空表单
被添加到表单集中，但是所有表单总数不能超过 ``max_num`` 的值::

    >>> AuthorFormSet = modelformset_factory(Author, max_num=4, extra=2)
    >>> formset = AuthorFormSet(queryset=Author.objects.order_by('name'))
    >>> for form in formset:
    ...     print form.as_table()
    <tr><th><label for="id_form-0-name">Name:</label></th><td><input id="id_form-0-name" type="text" name="form-0-name" value="Charles Baudelaire" maxlength="100" /><input type="hidden" name="form-0-id" value="1" id="id_form-0-id" /></td></tr>
    <tr><th><label for="id_form-1-name">Name:</label></th><td><input id="id_form-1-name" type="text" name="form-1-name" value="Paul Verlaine" maxlength="100" /><input type="hidden" name="form-1-id" value="3" id="id_form-1-id" /></td></tr>
    <tr><th><label for="id_form-2-name">Name:</label></th><td><input id="id_form-2-name" type="text" name="form-2-name" value="Walt Whitman" maxlength="100" /><input type="hidden" name="form-2-id" value="2" id="id_form-2-id" /></td></tr>
    <tr><th><label for="id_form-3-name">Name:</label></th><td><input id="id_form-3-name" type="text" name="form-3-name" maxlength="100" /><input type="hidden" name="form-3-id" id="id_form-3-id" /></td></tr>

.. versionchanged:: 1.2

``max_num`` 的值若为 ``None`` （缺省值），则表示表单显示数量没有限制。

在视图中使用模型表单集
-------------------------------

模型表单集与普通表单集非常相似。假设我们要一个编辑 ``Author`` 模型实例的模型
表单集::

    def manage_authors(request):
        AuthorFormSet = modelformset_factory(Author)
        if request.method == 'POST':
            formset = AuthorFormSet(request.POST, request.FILES)
            if formset.is_valid():
                formset.save()
                # do something.
        else:
            formset = AuthorFormSet()
        return render_to_response("manage_authors.html", {
            "formset": formset,
        })

正如你所见，一个模型表单集的视图逻辑与一个普通表单集没有什么大的区别。唯一的
不同之处在于我们调用 ``formset.save()`` 来保存数据。
（前文已提到这点： :ref:`saving-objects-in-the-formset` 。）

在 ``model_formset`` 中重载 ``clean()``
--------------------------------------------

和 ``ModelForms`` 一样，缺省情况下一个 ``model_formset`` 的 ``clean()`` 方法会
验证模型字段的唯一性。如果你重载了 ``clean()`` 方法，并且仍要维持相关的验证，
那么只能调用父类的 ``clean()`` 方法::

    class MyModelFormSet(BaseModelFormSet):
        def clean(self):
            super(MyModelFormSet, self).clean()
            # example custom validation across forms in the formset:
            for form in self.forms:
                # your custom formset validation

使用自定义的查询集
-----------------------

如前所述，可以重载缺省的模型表单集所使用的查询集::

    def manage_authors(request):
        AuthorFormSet = modelformset_factory(Author)
        if request.method == "POST":
            formset = AuthorFormSet(request.POST, request.FILES,
                                    queryset=Author.objects.filter(name__startswith='O'))
            if formset.is_valid():
                formset.save()
                # Do something.
        else:
            formset = AuthorFormSet(queryset=Author.objects.filter(name__startswith='O'))
        return render_to_response("manage_authors.html", {
            "formset": formset,
        })

注意，在这个例子中，我们在 ``POST`` 和 ``GET`` 两种情况下都传递了 ``queryset``
参数。

在模板中使用表单集
---------------------------------

.. highlight:: html+django

在 Django 模板中有三种方法使用表单集。

第一，你可以使用表单集在完成大多数工作::

    <form method="post" action="">
        {{ formset }}
    </form>

第二，你可以手动使用表单集，但是让表单自己管理自己::

    <form method="post" action="">
        {{ formset.management_form }}
        {% for form in formset %}
            {{ form }}
        {% endfor %}
    </form>

当你手动渲染表单时，如前文所述，要确定渲染管理表单。参见
:ref:`管理表单文档 <understanding-the-managementform>` 。

第三，你可以手动渲染每一个字段::

    <form method="post" action="">
        {{ formset.management_form }}
        {% for form in formset %}
            {% for field in form %}
                {{ field.label_tag }}: {{ field }}
            {% endfor %}
        {% endfor %}
    </form>

如果你选择第三种方法，并且没有使用 ``{% for %}`` 循环来遍历字段，那么就必须渲染
主键字段。例如，假设你要渲染模型的 ``name`` 和 ``age`` 字段::

    <form method="post" action="">
        {{ formset.management_form }}
        {% for form in formset %}
            {{ form.id }}
            <ul>
                <li>{{ form.name }}</li>
                <li>{{ form.age }}</li>
            </ul>
        {% endfor %}
    </form>

注意，上例中我们必须显式地渲染 ``{{ form.id }}`` 。这样是为了保证模型表单集在
``POST`` 情况下能够正常工作。（上例假设主键的名字是 ``id`` 。如果你自己定义的
主键不是 ``id`` ，那么请确保使用你所定义的主键名称。）

.. highlight:: python

内联表单集
===============

内联表单集是一个在模型表单集之上的小的抽象层，用于简化通过外键关联对象的工作。
假设有如下两个模型::

    class Author(models.Model):
        name = models.CharField(max_length=100)

    class Book(models.Model):
        author = models.ForeignKey(Author)
        title = models.CharField(max_length=100)

如果要创建一个表单集，允许你编辑属于某个特定作者的书籍，可以这样::

    >>> from django.forms.models import inlineformset_factory
    >>> BookFormSet = inlineformset_factory(Author, Book)
    >>> author = Author.objects.get(name=u'Mike Royko')
    >>> formset = BookFormSet(instance=author)

.. note::
    ``inlineformset_factory`` 使用 ``modelformset_factory`` 并且标记
    ``can_delete=True`` 。

多个外键指向同一个模型
-------------------------------------------

如果你的模型包含多个指向同一个模型的外键，那么需要使用 ``fk_name`` 来手动解决
二义性问题。例如，假设有如下模型::

    class Friendship(models.Model):
        from_friend = models.ForeignKey(Friend)
        to_friend = models.ForeignKey(Friend)
        length_in_months = models.IntegerField()

要解决问题，可以在``inlineformset_factory`` 中使用 ``fk_name`` ::

    >>> FriendshipFormSet = inlineformset_factory(Friend, Friendship, fk_name="from_friend")

在视图中使用内联表单集
---------------------------------

你可能会需要一个允许用户编辑一个模型相关对象的视图，可以这样做::

    def manage_books(request, author_id):
        author = Author.objects.get(pk=author_id)
        BookInlineFormSet = inlineformset_factory(Author, Book)
        if request.method == "POST":
            formset = BookInlineFormSet(request.POST, request.FILES, instance=author)
            if formset.is_valid():
                formset.save()
                # Do something.
        else:
            formset = BookInlineFormSet(instance=author)
        return render_to_response("manage_books.html", {
            "formset": formset,
        })

注意，我们在 ``POST`` 和 ``GET`` 情况下都传递了 ``instance`` 。
