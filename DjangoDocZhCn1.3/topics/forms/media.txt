表单媒体
==========

一个漂亮而又易用的网页表单不仅仅只需要 HTML ，还需要 CSS 样式表。如果你想使用
新奇的 "Web2.0" 控件，那么还需要 JavaScript 。具体需要哪些 CSS 和 JavaScript
取决于你的页面上使用了哪些控件。

这就引出了 Django 媒体定义的问题。 Django 允许为表单和控件关联不同的媒体文件。
例如，假设你要使用一个日历来渲染日期字段，你可以使用自定义的日期控件。这个控件
可以只与用于日历的 CSS 和 JavaScript 关联。当日历控件用于一个表单时， Django 会
判定需要哪些 CSS 和 JavaScript ，并在表单中提供媒体文件列表以使用在网页中使用。

.. admonition:: 媒体和 Django 管理站点

    Django 管理站点应用定义定义了许多定制控件，如日历、过滤选择等等。这些控件
    定义了需要的媒体，并且 Django 管理站点使用了定制的控件来代替 Django 缺省的
    控件。管理站点模板只会包含那些渲染控件所需要的媒体文件。

    如果你喜欢 Django 管理站点应用中的控件，请在你的应用中随意使用。它们存放在
    ``django.contrib.admin.widgets`` 中。

.. admonition:: 使用哪个 JavaScript 套件？

    JavaScript 套件多如牛毛，并且大部分套件都包含增强应用功能的控件（例如日历
    控件）。 Django 非常谨慎地不包含任何 JavaScript 套件。正所谓尺有所短，寸有
    所长，适合你的需求的套件才是最好的。但是不管任何 JavaScript 套件 Django 都
    可以整合。

静态方式定义媒体
----------------------------

对媒体作静态定义是最简单的一种方法。使用这种方法时把整个媒体定义在一个内部类
中，把媒体定义为这个内部类的属性。

下面是一个例子::

    class CalendarWidget(forms.TextInput):
        class Media:
            css = {
                'all': ('pretty.css',)
            }
            js = ('animations.js', 'actions.js')

上面的例子中，定义了一个基于 ``TextInput`` 的 ``CalendarWidget`` 。每次在表单中
使用这个控件时，表单就会包含 CSS 文件 ``pretty.css`` 与 JavaScript 文件
``animations.js`` 和 ``actions.js`` 。

在运行时静态定义的媒体文件被转化为一个名为 ``media`` 的控件属性。
CalendarWidget 实例的媒体可以通过这个属性来获得。
::

    >>> w = CalendarWidget()
    >>> print w.media
    <link href="http://media.example.com/pretty.css" type="text/css" media="all" rel="stylesheet" />
    <script type="text/javascript" src="http://media.example.com/animations.js"></script>
    <script type="text/javascript" src="http://media.example.com/actions.js"></script>

以下为所有可能的 ``Media`` 选项的列表。这些选项都不是必须的。

``css``
~~~~~~~

一个描述不同输出形式下表单所需要的 CSS 文件的字典。

字典中的值应当是一个文件名元组或列表。如何定义媒体文件的路径详见
`媒体路径一节`_ 。

.. _媒体路径一节: `媒体定义中的路径`_

字典的键值是输出媒体类型，与 CSS 文件所能接受的类型相同： 'all' 、 'aural' 、
'braille' 、 'embossed' 、 'handheld' 、 'print' 、 'projection' 、 'screen' 、
'tty' 和 'tv' 。如何需要针对不同的媒体类型使用不同的样式表，就需要为不同媒体类型
提供一个 CSS 文件列表。下面的例子中提供两个 CSS 选项，一个用于屏幕，一个用于
打印::

    class Media:
        css = {
            'screen': ('pretty.css',),
            'print': ('newspaper.css',)
        }

如果 CSS 文件可适用于多个输出类型，那么字典的键值可以是一个以逗号分隔的媒体类型
列表。下面的例子中， TV 和 projectors 使用相同的 CSS 文件::

    class Media:
        css = {
            'screen': ('pretty.css',),
            'tv,projector': ('lo_res.css',),
            'print': ('newspaper.css',)
        }

上例渲染的结果为::

    <link href="http://media.example.com/pretty.css" type="text/css" media="screen" rel="stylesheet" />
    <link href="http://media.example.com/lo_res.css" type="text/css" media="tv,projector" rel="stylesheet" />
    <link href="http://media.example.com/newspaper.css" type="text/css" media="print" rel="stylesheet" />

``js``
~~~~~~

一个描述需要的 JavaScript 文件的元组。如何定义媒体的路径详见 `媒体定义中的路径`_
一节。

``extend``
~~~~~~~~~~

媒体定义时用于定义继承行为的布尔值。

缺省情况下，当一个对象使用静态媒体定义时会继承父控件的所有相关媒体。这个继承
方式与父控件如何定义媒体无关。例如，下例中我们扩展了上例中的基本的 Calendar
控件::

    >>> class FancyCalendarWidget(CalendarWidget):
    ...     class Media:
    ...         css = {
    ...             'all': ('fancy.css',)
    ...         }
    ...         js = ('whizbang.js',)

    >>> w = FancyCalendarWidget()
    >>> print w.media
    <link href="http://media.example.com/pretty.css" type="text/css" media="all" rel="stylesheet" />
    <link href="http://media.example.com/fancy.css" type="text/css" media="all" rel="stylesheet" />
    <script type="text/javascript" src="http://media.example.com/animations.js"></script>
    <script type="text/javascript" src="http://media.example.com/actions.js"></script>
    <script type="text/javascript" src="http://media.example.com/whizbang.js"></script>

FancyCalendar 控件继承了父控件的所有媒体。如果你不想继承，那么可以在媒体定义时
添加一个 ``extend=False`` 定义::

    >>> class FancyCalendarWidget(CalendarWidget):
    ...     class Media:
    ...         extend = False
    ...         css = {
    ...             'all': ('fancy.css',)
    ...         }
    ...         js = ('whizbang.js',)

    >>> w = FancyCalendarWidget()
    >>> print w.media
    <link href="http://media.example.com/fancy.css" type="text/css" media="all" rel="stylesheet" />
    <script type="text/javascript" src="http://media.example.com/whizbang.js"></script>

如果想进一步控制媒体继承，请使用
`动态属性`_ 方式来定义媒体。动态属性方式可以给你继承的完全控制权。

.. _动态属性: `动态属性方式定义媒体`_

动态属性方式定义媒体
---------------------------

如果需要对媒体进行精细的控制，那么可以直接定义媒体属性。实现的方式是定义一个
返回 ``forms.Media`` 实例的控件属性。 ``forms.Media`` 的构造器接受 ``css`` 和
``js`` 关键字参数，参数格式与静态定义的格式相同。

例如， Calendar 控件的静态定义也可以用动态定义的方式实现::

    class CalendarWidget(forms.TextInput):
        def _media(self):
            return forms.Media(css={'all': ('pretty.css',)},
                               js=('animations.js', 'actions.js'))
        media = property(_media)

如何为动态属性构建返回值详见 `媒体对象`_ 一节。

.. _form-media-paths:

媒体定义中的路径
--------------------------

.. versionchanged:: 1.3

用于定义媒体的路径可以相对的，也可以是绝对的。如果路径以
'/' 、 'http://' 或 'https://' 开头，那么就会被视作是绝对的，会被原封不动地
保留。其余的会视为相对的，会被加上适当的前缀。

在 :doc:`静态文件应用 </ref/contrib/staticfiles>` 中提到增加了两个新设置：
:setting:`STATIC_URL` 和 :setting:`STATIC_ROOT` 。这两个设置用于指向
“静态文件”。

为了找到合适的前缀， Django 会先使用 :setting:`STATIC_URL` ，如果
:setting:`STATIC_URL` 为 ``None`` ，那么就会使用 :setting:`MEDIA_URL` 。例如
你的网站的 :setting:`MEDIA_URL` 是 ``'http://uploads.example.com/'`` 且
:setting:`STATIC_URL` 是 ``None``::

    >>> class CalendarWidget(forms.TextInput):
    ...     class Media:
    ...         css = {
    ...             'all': ('/css/pretty.css',),
    ...         }
    ...         js = ('animations.js', 'http://othersite.com/actions.js')

    >>> w = CalendarWidget()
    >>> print w.media
    <link href="/css/pretty.css" type="text/css" media="all" rel="stylesheet" />
    <script type="text/javascript" src="http://uploads.example.com/animations.js"></script>
    <script type="text/javascript" src="http://othersite.com/actions.js"></script>

但是如果 :setting:`STATIC_URL` 是 ``'http://static.example.com/'``::

    >>> w = CalendarWidget()
    >>> print w.media
    <link href="/css/pretty.css" type="text/css" media="all" rel="stylesheet" />
    <script type="text/javascript" src="http://static.example.com/animations.js"></script>
    <script type="text/javascript" src="http://othersite.com/actions.js"></script>


媒体对象
-------------

当你获取一个控件或表单的媒体属性时会返回一个 ``forms.Media`` 对象。正如我们已经
看到的，一个媒体对象的字符表现形式是一段需要被包含在网页 ``<head>`` 段中的 HTML
代码。

然而，媒体对象还有一些其他有趣的属性。

媒体子集
~~~~~~~~~~~~~

如果只需要特定类型的媒体，那么可以通过下标操作符来过滤出需要的媒体。例如::

    >>> w = CalendarWidget()
    >>> print w.media
    <link href="http://media.example.com/pretty.css" type="text/css" media="all" rel="stylesheet" />
    <script type="text/javascript" src="http://media.example.com/animations.js"></script>
    <script type="text/javascript" src="http://media.example.com/actions.js"></script>

    >>> print w.media['css']
    <link href="http://media.example.com/pretty.css" type="text/css" media="all" rel="stylesheet" />

当你使用下标操作符时，返回的是一个新的只包含所需要的媒体的对象。

联合媒体对象
~~~~~~~~~~~~~~~~~~~~~~~

媒体对象可以被加在一起。当两个媒体对象相加时，会返回包含两个对象所有见容的媒体
对象::

    >>> class CalendarWidget(forms.TextInput):
    ...     class Media:
    ...         css = {
    ...             'all': ('pretty.css',)
    ...         }
    ...         js = ('animations.js', 'actions.js')

    >>> class OtherWidget(forms.TextInput):
    ...     class Media:
    ...         js = ('whizbang.js',)

    >>> w1 = CalendarWidget()
    >>> w2 = OtherWidget()
    >>> print w1.media + w2.media
    <link href="http://media.example.com/pretty.css" type="text/css" media="all" rel="stylesheet" />
    <script type="text/javascript" src="http://media.example.com/animations.js"></script>
    <script type="text/javascript" src="http://media.example.com/actions.js"></script>
    <script type="text/javascript" src="http://media.example.com/whizbang.js"></script>

表单上的媒体
--------------

不光控件可以定义自己的媒体，表单也可以。表单定义媒体的规则与控件相同：可以静态
也可以动态定义；路径和继承规则也相同。

不管你是否定义媒体声明， *所有* 表单对象都有一个媒体属性。这个属性的缺省值是
表单中所有控件的媒体的合集::

    >>> class ContactForm(forms.Form):
    ...     date = DateField(widget=CalendarWidget)
    ...     name = CharField(max_length=40, widget=OtherWidget)

    >>> f = ContactForm()
    >>> f.media
    <link href="http://media.example.com/pretty.css" type="text/css" media="all" rel="stylesheet" />
    <script type="text/javascript" src="http://media.example.com/animations.js"></script>
    <script type="text/javascript" src="http://media.example.com/actions.js"></script>
    <script type="text/javascript" src="http://media.example.com/whizbang.js"></script>

如果你想在表单中添加另外的媒体（例如布局用的 CSS ），那么只要在表单中简单的添加
媒体声明就可以了::

    >>> class ContactForm(forms.Form):
    ...     date = DateField(widget=CalendarWidget)
    ...     name = CharField(max_length=40, widget=OtherWidget)
    ...
    ...     class Media:
    ...         css = {
    ...             'all': ('layout.css',)
    ...         }

    >>> f = ContactForm()
    >>> f.media
    <link href="http://media.example.com/pretty.css" type="text/css" media="all" rel="stylesheet" />
    <link href="http://media.example.com/layout.css" type="text/css" media="all" rel="stylesheet" />
    <script type="text/javascript" src="http://media.example.com/animations.js"></script>
    <script type="text/javascript" src="http://media.example.com/actions.js"></script>
    <script type="text/javascript" src="http://media.example.com/whizbang.js"></script>
