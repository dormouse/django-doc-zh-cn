============================
Django 模板语言
============================

.. admonition:: 关于本文档

    本文档阐述 Django 模板系统的语法。如果想要深入的了解模板系统的工作原理和
    如何扩展，请参阅 :doc:`/ref/templates/api` 。

Django 的模板语言的设计原则是保持功能和易用之间的平衡，方便只会使用 HTML 的开发
人员使用。如果有使用其他基于文本的模板系统的经验，如 Smarty_ 或
CheetahTemplate_ ，那么会发现会 Django 的模板就像在家里一样舒服。

.. admonition:: 哲学

    如果你有编程背景，或者曾经使用过象 PHP 一样直接把代码写进 HTML 中的语言，
    那么一定要牢记 Django 模板系统不是简单地把 Python 代码嵌入 HTML 中。它是
    这样设计的：模板系统只用于表现，与程序逻辑无关。

    Django 模板系统使用“标记”，标记的功能与某些程序语言类似。如 :ttag:`if`
    标记用于布尔值测试； :ttag:`for` 用于循环等等。但是这些标记与 Python 代码是
    不同的，并且模板系统也不会执行 Python 表达式。缺省情况下， Django 只支持
    下面列出的标记、过滤器和语法（当然，可以按需增加 :doc:`你自己的扩展
    </howto/custom-template-tags>` ）。

.. _`The Django template language: For Python programmers`: ../templates_python/
.. _Smarty: http://smarty.php.net/
.. _CheetahTemplate: http://www.cheetahtemplate.org/

模板
=========

.. highlightlang:: html+django

模板是一个简单的文本文件，它可以生成任何基于文本的格式（ HTML 、 XML 或 CSV
等等）。

一个模板包含用于赋值的 **变量** 和控件模板逻辑的 **标记** 。

下面是一个用于说明基本原理的小模板。例子中的每个元素会在后文中详细说明。::

    {% extends "base_generic.html" %}

    {% block title %}{{ section.title }}{% endblock %}

    {% block content %}
    <h1>{{ section.title }}</h1>

    {% for story in story_list %}
    <h2>
      <a href="{{ story.get_absolute_url }}">
        {{ story.headline|upper }}
      </a>
    </h2>
    <p>{{ story.tease|truncatewords:"100" }}</p>
    {% endfor %}
    {% endblock %}

.. admonition:: 哲学

    为什么使用一个基于文本的模板，而不是一个基于 XML 的（如 Zope 的 TAL ）
    模板？因为我们需要 Django 的模板可用于比 XML/HTML 更广阔的范围。在环球在线
    网站中，我们的模板应用于电子邮件、 JavaScript 和 CSV 。你可以在任何基于文本
    的格式中使用模板。

    哦，还有一个不得不说的事：让人类手动编辑 XML 是一个悲剧！

变量
=========

变量的形式是这样的: ``{{ variable }}`` 。当模板引擎遇到一个变量，就会对变量
赋值，然后输出赋值的结果。变量名称由字母和下划线（ ``"_"`` ）组成。点符号
（ ``"."`` ）也可以出现在变量名中，但是有特殊含义，下面会讲到。重要的是：
*在变量名中不能有空白和标点符号。*

点符号（ ``.`` ）用于获得变量的属性。

.. admonition:: 运行机制

    从技术上说，当模板系统遇到一个点符号时会按以下顺序进行查找：

        * 字典查找
        * 属性查找
        * 方法调用
        * 列表索引查找

在上面的例子中， ``{{ section.title }}`` 会被替换为 ``section`` 对象的 ``title``
属性。

如果你使用了一个不存在的变量，模板系统会以 ``TEMPLATE_STRING_IF_INVALID`` 设置的
内容来代替。缺省情况是设置为 ``''`` （空字符串）。

过滤器
=======

你可以通过使用 **过滤器** 来显示修改过的变量。

过滤器看上去是这样的： ``{{ name|lower }}`` 。这个过滤器显示的是经过 ``lower``
过滤器过滤过的 ``{{ name }}`` 的值，即把值转换为小写字母。过滤器使用管道
（ ``|`` ）符号。

过滤器可以“串联”，即一个过滤器的输入可以作为另一个过滤器的输入。
``{{ text|escape|linebreaks }}`` 表示先对文本进行转义，然后把换行符转换为
``<p>`` 标记。

有些过滤器有参数。一个带参数的过滤器是这样的： ``{{bio|truncatewords:30 }}`` 。
这个过滤器表示显示 ``bio`` 变量的前 30 个单词。

包含空白的过滤器参数必须用引号包围，例如，使用一个逗号加上空白来联结应当这样
写： ``{{ list|join:", " }}`` 。

Django 提供约三十个内建模板过滤器，请参阅 :ref:`内建过滤器手册
<ref-templates-builtins-filters>` 。下面是一些常用的模板过滤器，给大家尝尝鲜：

    :tfilter:`default`
        如果一个变量为假或为空，那么使用缺省值。否则使用变量的值。例如::

            {{ value|default:"nothing" }}

        如果 ``value`` 没有赋值或为空，那么上例会显示 "``nothing``" 。

    :tfilter:`length`
        返回值的长度，可用于字符串或列表。例如::

            {{ value|length }}

        如果 ``value`` 是 ``['a', 'b', 'c', 'd']`` ，那么输出 ``4`` 。

    :tfilter:`striptags`
        去除所有 [X]HTML 标记。例如::

            {{ value|striptags }}

        如果 ``value`` 是 ``"<b>Joel</b> <button>is</button> a
        <span>slug</span>"`` ，那么输出 ``"Joel is a slug"`` 。

重复一下，这些只是一些例子，完整内容参见 :ref:`内建过滤器手册
<ref-templates-builtins-filters>` 。

你也可以创建你自定义的模板过滤器，请参阅 :doc:`/howto/custom-template-tags` 。

.. seealso::

    Django 的管理站点接口可以包含指定站点的所有模板标记和过滤器变量的完整引用，
    请参阅 :doc:`/ref/contrib/admin/admindocs` 。

标记
====

标记看上去是这样的： ``{% tag %}`` 。标记比变量复杂得多：有些标记创建输出文本，
有些标记执行循环或逻辑比较来控件流程，还有些标记载入额外的信息以供后面的变量
使用。

有些标记由开始标记和结束标记组成（如 ``{% tag %} ... tag contents
... {% endtag %}`` ）。

Django 有大约两打内建模板标记，完整参考请参阅 :ref:`内建标记手册
<ref-templates-builtins-tags>` 。下面是一些常用的模板过滤器，给大家尝尝鲜：

    :ttag:`for`
        循环一个序列。
        例如，显示一个 ``athlete_list`` 列表中的所有运动员::

            <ul>
            {% for athlete in athlete_list %}
                <li>{{ athlete.name }}</li>
            {% endfor %}
            </ul>

    :ttag:`if` and ``else``
        测试一个变量::

            {% if athlete_list %}
                Number of athletes: {{ athlete_list|length }}
            {% else %}
                No athletes.
            {% endif %}

        上例中，如果 ``athlete_list`` 非空，那么就会显示运动员的人数（
        ``{{ athlete_list|length }}`` ）。

        你也可以在 ``if`` 标记中使用过滤器和各种操作符::

            {% if athlete_list|length > 1 %}
               Team: {% for athlete in athlete_list %} ... {% endfor %}
            {% else %}
               Athlete: {{ athlete_list.0.name }}
            {% endif %}

    :ttag:`block` 和 :ttag:`extends`
        设置 `模板继承`_ （见下），消减模板“陈词滥调”的有力工具。

重复一下，以上只是一小部分内容，完整内容参见 :ref:`内建标记手册
<ref-templates-builtins-tags>` 。

你也可以创建你自定义的模板标记，参见 :doc:`/howto/custom-template-tags` 。

.. seealso::

    Django 的管理站点接口可以包含指定站点的所有模板标记和过滤器变量的完整引用，
    请参阅 :doc:`/ref/contrib/admin/admindocs` 。

注释
========

模板中注释的语法是 ``{# #}`` 。

例如，下例显示 ``'hello'``::

    {# greeting #}hello

一个注释可以包含任何模板代码，包括合法或非法的。例如::

    {# {% if foo %}bar{% else %} #}

这个语法只能用于单行注释（在 ``{#`` 和 ``#}`` 之间不能使用换行符）。如果要使用
多行注释，请参见 :ttag:`comment` 标记。

.. _template-inheritance:

模板继承
====================

Djaongo 模板引擎中最有力的（也是最复杂的）是模板继承。模板继承允许你创建一个
基础的包含站点普通元素的“骨架”模板，然后定义用于子模板重载的 **块** 。

理解模板继承最方便的方法是举例说明::

    <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
    <html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
    <head>
        <link rel="stylesheet" href="style.css" />
        <title>{% block title %}My amazing site{% endblock %}</title>
    </head>

    <body>
        <div id="sidebar">
            {% block sidebar %}
            <ul>
                <li><a href="/">Home</a></li>
                <li><a href="/blog/">Blog</a></li>
            </ul>
            {% endblock %}
        </div>

        <div id="content">
            {% block content %}{% endblock %}
        </div>
    </body>
    </html>

我们定义了一个名为 ``base.html`` 的模板，这个模板中定义一个简单两列式的 HTML
骨架。 content 块留空，由子模板来填充。

在这个例子中， ``{% block %}`` 标记定义了三个可以由子模板来填充的块。所有
``block`` 标记用于告诉模板引擎，这是一个可以由子模板重载的块。

一个子模板可能是这样的::

    {% extends "base.html" %}

    {% block title %}My amazing blog{% endblock %}

    {% block content %}
    {% for entry in blog_entries %}
        <h2>{{ entry.title }}</h2>
        <p>{{ entry.body }}</p>
    {% endfor %}
    {% endblock %}

在这里， ``{% extends %}`` 标记是关键。它告诉模板引擎，这个模板是由另一个模板
“扩展”而来。当模板系统运行这个模板时会首先找到这个模板的父模板（本例中的
"base.html" ）。

这时，模板引擎会把子模板中内容来替换父模板中的三对 ``{% block %}`` 标记之间的
内容。取决于 ``blog_entries`` 的值，输出可能是这样的::

    <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
    <html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
    <head>
        <link rel="stylesheet" href="style.css" />
        <title>My amazing blog</title>
    </head>

    <body>
        <div id="sidebar">
            <ul>
                <li><a href="/">Home</a></li>
                <li><a href="/blog/">Blog</a></li>
            </ul>
        </div>

        <div id="content">
            <h2>Entry one</h2>
            <p>This is my first entry.</p>

            <h2>Entry two</h2>
            <p>This is my second entry.</p>
        </div>
    </body>
    </html>

注意，子模板没有定义 ``sidebar`` 块，就会使用父模板中的内容。父模板
``{% block %}`` 块中的内容总是作为后备内容使用。

你可以使用任意多层继承。通常的做法是使用以下三层继承：

    * 创建一个 ``base.html`` 模板来存放站点的外观。
    * 为站点每个“小节”创建一个 ``base_SECTIONNAME.html`` 模板，例如
      ``base_news.html`` 和 ``base_sports.html`` 。这些模板都扩展自
      ``base.html`` 并包含小节的样式和外观。
    * 为每种页面创建单独的模板，如新闻文章或博客条目。这些模板都扩展自相应的
      小节模板。

这样可以达到代码重用最大化，并且方便向共用区域（如小节范围的导航条）增添内容。

以下是一个关于继承的窍门：

    * 如果你在一个模板内使用 ``{% extends %}`` ，那么这个标记必须是模板内的第一
      个标记，否则继承无效。

    * 在你的基础模板中， ``{% block %}`` 标记应当多用。还记得吗，子模板不必定义
      父模板中所有的块。因此只要在父模板的块定义合理的缺省值，然后在子模板中
      定义需要的值就行了。这种预留的钩子多比少好。

    * 如果发现在许多的模板中有重复的内容，那么很可能就应当把重复的内容移到
      父模板的 ``{% block %}`` 中。

    * 如果需要获取父模板中的块的内容，可以使用 ``{{ block.super }}`` 变量。这个
      变量用于想要添加块的内容，而不是完全覆盖块情况下。使用
      ``{{ block.super }}`` 插入的内容不会被自动转义（参见 `下节`_ )，因为如果
      有必要的话，这些内容在父模板中就已经转义了。

    * 为了提高可读性，可以给你的 ``{% endblock %}`` 标记起个 *名字* 。例如::

          {% block content %}
          ...
          {% endblock content %}

      在大型的模板中，这个技巧可以帮助你检查块的闭合。

最后，注意在同一个模板中 ``{% block %}`` 标记的名字不能相同。之所以有这个限制是
因为一个块标记“同时”起到两个作用，即一个块标记不仅仅提供一个在填充的洞，同时
还定义父模板中填充的内容。如果两个块重名，那么父模板就不知道用哪个内容来填充了。

.. _下节: #automatic-html-escaping
.. _automatic-html-escaping:

自动 HTML 转义
=======================

当从模板产生 HTML 时，总是有一个风险：一个变量可以包含影响结果 HTML 的字符。
例如，假设以下模板片段::

    Hello, {{ name }}.

初看，这只是显示一个用户名，没有危险。但是假设用户输入了这样的用户名::

    <script>alert('hello')</script>

这样，模板就会输出::

    Hello, <script>alert('hello')</script>

...这种情况下，浏览器会弹出一个 JavaScript 警告框！

同理，如果用户包含一个 ``'<'`` 符号，就像::

    <b>username

输出的结果就会是这样::

    Hello, <b>username

...结果，后面的页面内容就会变更粗体！

显而易见，用户提交的数据不能盲目相信，直接插入到页面中。别有用心的用户会利用这
种漏洞使坏的。这种安全漏洞被称为 `跨站脚本`_ (XSS) 攻击。

为避免这个问题，你有两个选择：

    * 一、确保对每一个不信任的变量使用 ``escape`` 过滤器（详见下文）。这个
      过滤器会把可能有害的 HTML 字符转化为无害的字符。在 Django 的早期，这种
      方法的缺省的。问题是这样程序员或模板作者的责任就大， *你* 得确保转义
      所有应当转义的东西，这是很难做到的。

    * 二、可以利用 Django 的自动 HTML 转义。本节余下部分讨论自动转义。

Django 在缺省情况下，每个模板自动转义变量标记的输出，尤其是以下五个字符：

    * ``<`` 转换为 ``&lt;``
    * ``>`` 转换为 ``&gt;``
    * ``'`` （单引号） 转换为 ``&#39;``
    * ``"`` （双引号） 转换为 ``&quot;``
    * ``&`` 转换为 ``&amp;``

再一次强调这种转义缺省情况下是打开的。如果你使用了 Django 的模板系统，你已经
被保护了。

.. _跨站脚本: http://en.wikipedia.org/wiki/Cross-site_scripting

如何关闭自动转义
------------------

如果不想使用自动转义，那么在站点级别、模板级别或变量级别，有多种方法可以关闭
自动转义。

为什么要关闭？因为有时你 *打算* 输出原始 HTML ，这种情况下是不能转义的。例如，
你可能在数据库中放了一段 HTML 代码，并且想把代码直接嵌入到模板之中。又比如，你
可能想使用 Django 的模板系统来产生电子邮件之类的文本而 *不是* HTML。

针对个别变量
~~~~~~~~~~~~~~~~~~~~~~~~

针对个别变量关闭自动转义可以使用 ``safe`` 过滤器::

    这个会转义： {{ data }}
    这个不会转义： {{ data|safe }}

可以把 *safe* 理解为 *转义安全* 或 *可以安全地作为 HTML 使用* 的缩写。在上例
中，如果 ``data`` 包含 ``'<b>'`` ，那么将输出::

    这个会转义： &lt;b&gt;
    这个不会转义： <b>

针对模板块
~~~~~~~~~~~~~~~~~~~

针对模板控制自动转义，可以用 ``autoescape`` 标记包围模板（或模板的一部分）。
就像这样::

    {% autoescape off %}
        Hello {{ name }}
    {% endautoescape %}

``autoescape`` 标记只接受 ``on`` 或 ``off`` 作为参数。有时，你可能需要强制打开
自动转义。下面是一个示例模板::

    缺省情况下自动转义是打开的。 Hello {{ name }}

    {% autoescape off %}
        这个不会自动转义： {{ data }}.

        这个也不会： {{ other_data }}
        {% autoescape on %}
            又开始自动转义了： {{ name }}
        {% endautoescape %}
    {% endautoescape %}

auto-escaping 标记会把其效用传递给子模板，就像通过 ``include`` 标记包含模板
一样。例如::

    # base.html

    {% autoescape off %}
    <h1>{% block title %}{% endblock %}</h1>
    {% block content %}
    {% endblock %}
    {% endautoescape %}


    # child.html

    {% extends "base.html" %}
    {% block title %}This & that{% endblock %}
    {% block content %}{{ greeting }}{% endblock %}

因为在基础模板中自动转义已关闭，所以在子模板板中也会关闭。当 ``greeting`` 变量
包含 ``<b>Hello!</b>`` 字符串时会输出::

    <h1>This & that</h1>
    <b>Hello!</b>

注意
-----

通常，模板作者不太需要关心自动转义的问题。 Python 开发者（写视图和自定义过滤器
的人）应当多考虑数据是否应当转义，正确标记数据。模板中就可以偷偷懒了。

如果你无法确定模板中的变量是否会被自动转义，那么可以在每个需要转义的变量上使用
``escape`` 过滤器。不用担心两次转义的问题，因为 ``escape`` 过滤器在自动转义打开
的情况下没有作用。

字符串文字和自动转义
--------------------------------------

前文提到，过滤器的参数可以是字符串::

    {{ data|default:"This is a string literal." }}

所有字符串中的文字 **不会** 被转义，就像使用了 ``safe`` 过滤器一样。因为字符串
中的文字是模板作者自动写的，应该是安全的。

这就意味着你应当这样写::

    {{ data|default:"3 &lt; 2" }}

...而不是这样::

    {{ data|default:"3 < 2" }}  <-- 错！不要这样写。

但是变量的值如果是字符串的话还是会被转义的，因为变量的值不是模板作者能够控制
的。

.. _template-accessing-methods:

调用方法
======================

大多数对象的方法可以在模板内部调用。也就是说模板内部不只可以调用类的属性（如
字段名称）和视图传递来的变量。例如，可以调用 Django ORM 提供的与外键关联的
:ref:`"entry_set"<topics-db-queries-related>` 。假设有一个“评论”模型与
“任务”模型通过外键关联，那么可以像如下遍历与一个给定任务的所有评论::

    {% for comment in task.comment_set.all %}
        {{ comment }}
    {% endfor %}

同样， :doc:`查询集</ref/models/querysets>` 提供一个统计所包含对象数量的
``count()`` 方法，我们可以调用这个方法来统计给定任务相关的评论的数量::

    {{ task.comment_set.all.count }}

当然，你可以方便的调用在模板中显式定义的方法::

    # In model
    class Task(models.Model):
        def foo(self):
            return "bar"

    # In template
    {{ task.foo }}

因为 Django 有意限制了模板中逻辑处理的总量，所有在模板内部不能向方法传递参数。
数据应当在视图中进行计算，然后传递给模板进行显示。

.. _loading-custom-template-libraries:

自定义标记和过滤器库
===============================

某些应用提供了自定义标记和过滤器库。可以通过使用 ``{% load %}`` 标记来调用
它们。

    {% load comments %}

    {% comment_form for blogs.entries entry.id with is_public yes %}

上例中， ``load`` 标记载入了 ``comments`` 标记库，这样该库中的 ``comment_form``
标记就可以使用了。在管理站点的文档区中可以找到当前应用中可用的自定义库列表。

``{% load %}`` 标记可以载入多个库，库名之前以空格分隔。
例如::

    {% load comments i18n %}

关于编写你自己的自定义模板库，请参阅 :doc:`/howto/custom-template-tags` 。

自定义库和模板继承
-----------------------------------------

在模板中载入了自定义标记或过滤器库后，所载入的库只能被当前模板使用，其父模板
或子模板是不能使用的。

例如，如果一个 ``foo.html`` 模板中有 ``{% load comments %}`` ，那么一个子模板
（例如一个包含 ``{% extends "foo.html" %}`` 的模板）是 *无法* 调用评论模板标记
和过滤器的。如果子模板要使用，那么就必须自己调用 ``{% load comments %}`` 。

这种方式是出于可维护性和健壮性的考虑。
