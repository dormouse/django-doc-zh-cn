.. _faq-models:

FAQ: 数据库和模型
=================

如何看到 Django 执行的原始 SQL 查询语句？
----------------------------------------------------

首先确认你的 Django 的 ``DEBUG`` 设置的值为 ``True`` 。然后执行如下命令::

    >>> from django.db import connection
    >>> connection.queries
    [{'sql': 'SELECT polls_polls.id,polls_polls.question,polls_polls.pub_date FROM polls_polls',
    'time': '0.002'}]

``connection.queries`` 只有当 ``DEBUG`` 为 ``True`` 时才有用。它是一个按 SQL
执行顺序排列的字典组成的列表。列表中的每个字典包含以下内容::

    ``sql`` -- 原始 SQL 语句
    ``time`` -- 以秒为单位的 SQL 语句执行时间

``connection.queries`` 包含所有执行过的 SQL 语句，包括 INSERT 、 UPDATES 和
SELECT 等等。只要你的程序动了数据库，那么所执行的 SQL 就会被记录下来。注意：
记录下来的 SQL 语句可能不包含参数引用，因为参数引用由数据库提供，而有点数据库
没有这个功能。

在 Django 中我可以使用已经存在的数据库吗？
----------------------------------------------

可以的。参见 :ref:`整合现有数据库 <howto-legacy-databases>` 。

如果我修改了模型，那么我如何更新我的数据库呢？
-----------------------------------------------------------

如果你不介意清空数据，那么你的项目中的 ``manage.py`` 工具有一个选择可以用于重置
本项目的数据库::

    manage.py reset appname

这命令会删除所有与 ``appname`` 数据库表并合建它们。

如果你的数据不允许删除，那么你只能在你的数据库中手动执行 ``ALTER TABLE`` 语句。
我们就是这样处理的，因为处理数据是一个非常敏感的操作，我们不想让这个操作自动
化。尽管如此，我们正在进行为数据库更新操作增加一些自动化功能的工作。

Django 模型支持多个主键吗？
------------------------------------------------------

不支持， Django 只支持单个主键。

But this isn't an issue in practice, because there's nothing stopping you from
adding other constraints (using the ``unique_together`` model option or
creating the constraint directly in your database), and enforcing the
uniqueness at that level. Single-column primary keys are needed for things such
as the admin interface to work; e.g., you need a simple way of being able to
specify an object to edit or delete.

How do I add database-specific options to my CREATE TABLE statements, such as specifying MyISAM as the table type?
------------------------------------------------------------------------------------------------------------------

We try to avoid adding special cases in the Django code to accommodate all the
database-specific options such as table type, etc. If you'd like to use any of
these options, create an :ref:`SQL initial data file <initial-sql>` that
contains ``ALTER TABLE`` statements that do what you want to do. The initial
data files are executed in your database after the ``CREATE TABLE`` statements.

For example, if you're using MySQL and want your tables to use the MyISAM table
type, create an initial data file and put something like this in it::

    ALTER TABLE myapp_mytable ENGINE=MyISAM;

As explained in the :ref:`SQL initial data file <initial-sql>` documentation,
this SQL file can contain arbitrary SQL, so you can make any sorts of changes
you need to make.

Why is Django leaking memory?
-----------------------------

Django isn't known to leak memory. If you find your Django processes are
allocating more and more memory, with no sign of releasing it, check to make
sure your ``DEBUG`` setting is set to ``False``. If ``DEBUG`` is ``True``, then
Django saves a copy of every SQL statement it has executed.

(The queries are saved in ``django.db.connection.queries``. See
`How can I see the raw SQL queries Django is running?`_.)

To fix the problem, set ``DEBUG`` to ``False``.

If you need to clear the query list manually at any point in your functions,
just call ``reset_queries()``, like this::

    from django import db
    db.reset_queries()
