.. _internals-documentation:

如何使用 Django 文档
==================================

\... 还关于文档是如何写作的。

Django's 文档使用基于 docutils__ 的 Sphinx__ 文档系统。
基本的思路是撰写轻度格式化的文本，通过这些文体可以转换成 HTML 、 PDF 和其他
格式的文档。

__ http://docutils.sf.net/
__ http://sphinx.pocoo.org/

要生成本地文档则需要先安装 Sphinx 。 ``easy_install Sphinx`` 命令比较方便。

安装完后，生成 html 就容易了，只要使用对``doc`` 使用 ``make html`` 命令就行了。

如果要帮助撰写文档，需要先阅读 `ReStructuredText 入门`__ 。然后还需要阅读
`Sphinx 标记说明`__ ，学习如何使用 metadata 、 indexing 和
cross-references 。

__ http://sphinx.pocoo.org/rest.html
__ http://sphinx.pocoo.org/markup/

当撰写或修改文档时应当牢记：尽可能多多使用语义标记。所以::

    Add ``django.contrib.auth`` to your ``INSTALLED_APPS``...

不如下句有用::

    Add :mod:`django.contrib.auth` to your :setting:`INSTALLED_APPS`...

这是因为 Sphinx 会根据语义标记自动生成正确的链接，这样对读者十分有帮助。语义标
记基本上没有数量限制。

Django 特有标记
----------------------

除了 `Sphinx 内置标记`__, Django 文档还定义了一些额外的描述单元：

__ http://sphinx.pocoo.org/markup/desc.html

    * Settings::

            .. setting:: INSTALLED_APPS

      要链接这个标记，请使用 ``:setting:`INSTALLED_APPS``` 。

    * Template tags::

            .. templatetag:: regroup

      要链接这个标记，请使用 ``:ttag:`regroup``` 。

    * Template filters::

            .. templatefilter:: linebreaksbr

      要链接这个标记，请使用 ``:tfilter:`linebreaksbr``` 。

    * Field lookups (i.e. ``Foo.objects.filter(bar__exact=whatever)``)::

            .. fieldlookup:: exact

      要链接这个标记，请使用 ``:lookup:`exact``` 。

    * ``django-admin`` commands::

            .. django-admin:: syncdb

      要链接这个标记，请使用 ``:djadmin:`syncdb``` 。

    * ``django-admin`` command-line options::

            .. django-admin-option:: --traceback

      要链接这个标记，请使用 ``:djadminopt:`--traceback``` 。

一个例子
----------

For a quick example of how it all fits together, check this out:

    * First, the ``ref/settings.txt`` document starts out like this::

        .. _ref-settings:

        Available settings
        ==================

        ...

    * Next, if you look at the ``topics/settings.txt`` document, you can see how
      a link to ``ref/settings`` works::

        Available settings
        ==================

        For a full list of available settings, see the :ref:`settings reference
        <ref-settings>`.

    * Next, notice how the settings (right now just the top few) are annotated::

        .. setting:: ADMIN_FOR

        ADMIN_FOR
        ---------

        Default: ``()`` (Empty tuple)

        Used for admin-site settings modules, this should be a tuple of settings
        modules (in the format ``'foo.bar.baz'``) for which this site is an
        admin.

        The admin site uses this in its automatically-introspected
        documentation of models, views and template tags.

      This marks up the following header as the "canonical" target for the
      setting ``ADMIN_FOR`` This means any time I talk about ``ADMIN_FOR``, I
      can reference it using ``:setting:`ADMIN_FOR```.

That's basically how everything fits together.

TODO
----

The work is mostly done, but here's what's left, in rough order of priority.

    * Change the "Added/changed in development version" callouts to proper
      Sphinx ``.. versionadded::`` or ``.. versionchanged::`` directives.

    * Check for and fix malformed links. Do this by running ``make linkcheck``
      and fix all of the 300+ errors/warnings.

      In particular, look at all the relative links; these need to be
      changed to proper references.

    * Most of the various ``index.txt`` documents have *very* short or even
      non-existent intro text. Each of those documents needs a good short intro
      the content below that point.

    * The glossary is very perfunctory. It needs to be filled out.

    * Add more metadata targets: there's lots of places that look like::

            ``File.close()``
            ~~~~~~~~~~~~~~~~

      \... these should be::

            .. method:: File.close()

      That is, use metadata instead of titles.

    * Add more links -- nearly everything that's an inline code literal
      right now can probably be turned into a xref.

      See the ``literals_to_xrefs.py`` file in ``_ext`` -- it's a shell script
      to help do this work.

      This will probably be a continuing, never-ending project.

    * Add `info field lists`__ where appropriate.

      __ http://sphinx.pocoo.org/markup/desc.html#info-field-lists

    * Add ``.. code-block:: <lang>`` to literal blocks so that they get
      highlighted.

Hints
-----

Some hints for making things look/read better:

    * Whenever possible, use links. So, use ``:setting:`ADMIN_FOR``` instead of
      ````ADMIN_FOR````.

    * Some directives (``.. setting::``, for one) are prefix-style directives;
      they go *before* the unit they're describing. These are known as
      "crossref" directives. Others (``.. class::``, e.g.) generate their own
      markup; these should go inside the section they're describing. These are
      called "description units".

      You can tell which are which by looking at in :file:`_ext/djangodocs.py`;
      it registers roles as one of the other.

    * When referring to classes/functions/modules, etc., you'll want to use the
      fully-qualified name of the target
      (``:class:`django.contrib.contenttypes.models.ContentType```).

      Since this doesn't look all that awesome in the output -- it shows the
      entire path to the object -- you can prefix the target with a ``~``
      (that's a tilde) to get just the "last bit" of that path. So
      ``:class:`~django.contrib.contenttypes.models.ContentType``` will just
      display a link with the title "ContentType".
