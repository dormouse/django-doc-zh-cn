.. _internals-documentation:

如何使用 Django 文档
==================================

\... 还关于文档是如何写作的。

Django's 文档使用基于 docutils__ 的 Sphinx__ 文档系统。
基本的思路是撰写轻度格式化的文本，通过这些文体可以转换成 HTML 、 PDF 和其他
格式的文档。

__ http://docutils.sf.net/
__ http://sphinx.pocoo.org/

要生成本地文档则需要先安装 Sphinx 。 ``easy_install Sphinx`` 命令比较方便。

安装完后，生成 html 就容易了，只要使用对``doc`` 使用 ``make html`` 命令就行了。

如果要帮助撰写文档，需要先阅读 `ReStructuredText 入门`__ 。然后还需要阅读
`Sphinx 标记说明`__ ，学习如何使用 metadata 、 indexing 和
cross-references 。

__ http://sphinx.pocoo.org/rest.html
__ http://sphinx.pocoo.org/markup/

当撰写或修改文档时应当牢记：尽可能多多使用语义标记。所以::

    Add ``django.contrib.auth`` to your ``INSTALLED_APPS``...

不如下句有用::

    Add :mod:`django.contrib.auth` to your :setting:`INSTALLED_APPS`...

这是因为 Sphinx 会根据语义标记自动生成正确的链接，这样对读者十分有帮助。语义标
记基本上没有数量限制。

Django 特有标记
----------------------

除了 `Sphinx 内置标记`__, Django 文档还定义了一些额外的描述单元：

__ http://sphinx.pocoo.org/markup/desc.html

    * Settings::

            .. setting:: INSTALLED_APPS

      要链接这个标记，请使用 ``:setting:`INSTALLED_APPS``` 。

    * Template tags::

            .. templatetag:: regroup

      要链接这个标记，请使用 ``:ttag:`regroup``` 。

    * Template filters::

            .. templatefilter:: linebreaksbr

      要链接这个标记，请使用 ``:tfilter:`linebreaksbr``` 。

    * Field lookups (i.e. ``Foo.objects.filter(bar__exact=whatever)``)::

            .. fieldlookup:: exact

      要链接这个标记，请使用 ``:lookup:`exact``` 。

    * ``django-admin`` commands::

            .. django-admin:: syncdb

      要链接这个标记，请使用 ``:djadmin:`syncdb``` 。

    * ``django-admin`` command-line options::

            .. django-admin-option:: --traceback

      要链接这个标记，请使用 ``:djadminopt:`--traceback``` 。

一个例子
----------

下面通过一个简洁的例子来说明标记的工作方式：

    * 首先， ``ref/settings.txt`` 文档开头是这样的::

        .. _ref-settings:

        Available settings
        ==================

        ...

    * 然后，如果查看 ``topics/settings.txt`` 文档，可以看到指向
      ``ref/settings`` 的链接是如何写的::

        Available settings
        ==================

        For a full list of available settings, see the :ref:`settings reference
        <ref-settings>`.

    * 接下来，注意如果声明 settings （现在只少量高级别的）::

        .. setting:: ADMIN_FOR

        ADMIN_FOR
        ---------

        Default: ``()`` (Empty tuple)

        Used for admin-site settings modules, this should be a tuple of settings
        modules (in the format ``'foo.bar.baz'``) for which this site is an
        admin.

        The admin site uses this in its automatically-introspected
        documentation of models, views and template tags.

      上述内容把第一行以后的内容作为 ``ADMIN_FOR`` setting 的目标。如果要引用
       ``ADMIN_FOR`` ，可以使用 ``:setting:`ADMIN_FOR``` 。

以上就是标记的基本用法。

TODO
----

大多数工作已经完。但还有一些剩下的工作，按重要性大约排列如下：

    * 更改 "Added/changed in development version" 翻译方式为适当的
      Sphinx ``.. versionadded::`` or ``.. versionchanged::`` 调用。

    * 检查并修正有缺陷的链接。运行 ``make linkcheck`` 并修正所有 300 个以上的
      错误或警告。

      尤其要检查所有引用链接，这些链接应当修正到正确的引用内容。

    * 所有不同的 ``index.txt`` 文档都 **非常** 短，甚至没有。每一部分的内容都应
      当有一个优秀的简短的介绍。

    * 词汇表内容太少，需要充实。

    * 增加更多的元数据目标：比如象这样的::

            ``File.close()``
            ~~~~~~~~~~~~~~~~

      \... 应当改成这样::

            .. method:: File.close()

      也就是说，用元数据代替标题。

    * 增加更多的链接。几乎所有内联语法现在可以正确地转换为一个外部链接。

      请查看 ``_ext`` 目录下的 ``literals_to_xrefs.py`` 文件。这个文件就是用于
      这项工作的。

      这可能是一项长期的，不会停止的工作。

    * 在适当的地方增加 `info field lists`__ 。

      __ http://sphinx.pocoo.org/markup/desc.html#info-field-lists

    * 在语法块中增加 ``.. code-block:: <lang>`` 来实现语法高亮。

提示
-----

这里是一些使文档看起来更赏心悦目的提示：

    * 尽可能使用链接。比如使用 ``:setting:`ADMIN_FOR``` 代替
      ````ADMIN_FOR```` 。

    * 一些指令是（如 ``.. setting::`` ）是前置型指令，我们称为“交叉引用”指令。
      这种指令必须放在指令定义之前。其他指令（如 ``.. class::`` ）会产生它们
      自己的标记，所以应当放在描述它们的小节之内。这称为“描述单元”。

      可以通过查看 :file:`_ext/djangodocs.py` 来确定指定的不同类型。这个文件中
      定义了规则。

    * 当指向 classes 、 functions 或 modules 等等时，将会使用目标的全名（如
      ``:class:`django.contrib.contenttypes.models.ContentType``` ）。

      可以象 ``:class:`~django.contrib.contenttypes.models.ContentType```
      一样在前面加一个 ``~`` 符号，这样就只会显示最后一小段内容。象这个例子就只
      会显示 "ContentType" 。
