.. _topics-install:

=====================
如何安装 Django
=====================

本文档会指导你安装 Django 。

安装 Python
==============

作为一个 Python 的 Web 框架， 使用 Django 前需要先安装 Python 。 

在 Python 2.3 至 2.6 版本下，Django 都可以使用。（由于 Python 3.0 是不向后兼容
的，所以 Django 目前无法在 Python 3.0 下使用；更多关于支持的 Python 版本和 3.0
迁移的内容，参见 :ref:`the Django FAQ <faq-install>` 。）

在 http://www.python.org 可以得到 Python 。如果你的操作系统是 Linux 或
Mac OS X ，那么可能 Python 已经安装在系统中了。

.. admonition:: Django on Jython

    如果你使用 Jython_ （一个 Java 平台上的 Python 实现），你将要做一些额外的
    步骤。详见 :ref:`howto-jython` 。

.. _jython: http://jython.org/

安装 Apache 和 mod_wsgi
=============================

如果你只是想体验一下 Django ，那么请跳过本节直接阅读下一节。因为 Django 本身
包含一个可用于测试的轻型 Web 服务器，所以在你要把 Django 部署到生产环境之前你
不需要安装 Apache 。

如果你想在生产环境下使用 Django ，那么请使用带有 `mod_wsgi`_ 的  Apache 。
mod_wsgi 与  mod_perl 类似，它把 Python 嵌入 Apache 并且在服务器启动时把
Python 代码载入内存。在 Apache 进程的生存周期内，代码始终留在内存内，相比其他
方式，这样可以获得显著的性能提升。请确保 Apache 已安装，并且 mod_wsgi 模块是
可用的。 Django 可以在支持 mod_wsgi 的任何版本 Apache 下工作。

安装完 mod_wsgi 后如何配置 mod_wsgi ，请参考 
See :ref:`如果通过 mod_wsgi 使用 Django <howto-deployment-modwsgi>` 。

如果因为某种原因你无法使用 mod_wsgi ，不用担心。 Django 支持其他多种部署方式。
最好的第二选择是使用 mod_wsgi 的前身 :ref:`mod_python
<howto-deployment-modpython>` 。另外 Django 遵循 WSGI_ 标准，可以运行于多种不同
的服务器平台。相应平台的安装方法参见 `不同平台安装维基页面`_ 。

.. _Apache: http://httpd.apache.org/
.. _mod_wsgi: http://code.google.com/p/modwsgi/
.. _WSGI: http://www.python.org/peps/pep-0333.html
.. _`不同平台安装维基页面`: http://code.djangoproject.com/wiki/ServerArrangements

.. _database-installation:

让你的数据库运行起来
=========================

如果你要使用 Django 数据库 API ，那么先要让你的数据库运行起来。 Django 支持
多种不同的数据库并且官方支持 PostgreSQL_ 、 MySQL_ 、 Oracle_ 和 SQLite_ 
（虽然  SQLite 不需要运行一个独立的服务）。

除了官方支持的数据库外，还有一些可通过第三方软件支持的数据库：

* `Sybase SQL Anywhere`_
* `IBM DB2`_
* `Microsoft SQL Server 2005`_
* Firebird_
* ODBC_

但是这些第三方支持的 Django 的版本和 ORM 功能差别很大。如果你对这些第三方支持的
功能或品质有疑问的话，请直接向这些第三方项目提问。

所了让数据库运行外，你还要确定安装好这些数据库相应的 Python 库。

* 如果你使用 PostgreSQL ，你需要 psycopg_ 包。 Django 既支持版本 1 也支持版本
  2 。（当你定义 Django 的数据库层时，可以定义 ``postgresql`` [用于版本 1 ]，
  也可以定义 ``postgresql_psycopg2`` [用于版本 2] 。）

  如果你使用 Windows ，可以试试非官方的 `编辑好的 Windows 版本`_ 。

* 如果你使用 MySQL ，你需要 1.2.1p2 或更高版本的 MySQLdb_ 。同时你还要读一下
  关于, :ref:`MySQL 数据库 <ref-databases>` 的注意事项。

* 如果你使用 SQLite 并且使用 Python 2.3 或者 Python 2.4 ，你需要 2.0.3 或更高
  版本的 pysqlite_ 。 Python 2.5 把 SQLite 作为标准模块内置了，所以就不需要安装
  其他额外的东西了。请参阅 SQLite 数据库 :ref:`注意事事项<sqlite-notes>` 。

* 如果你使用 Oracle ，你需要 cx_Oracle_ 。但请先阅读, :ref:`Oracle 数据库
  <oracle-notes>` 的注意事项，重点了解支持的 Oracle 和 ``cx_Oracle`` 的版本。

* 如果你使用一个非官方支持的数据库，请阅读相关文档，了解额外的需求。

如果你计划使用 Django 的 ``manage.py syncdb`` 命令来自动创建数据库的表，请先
确定在你的数据库中 Django 拥有创建和改变表的权限。如果你计划手动创建表，那么
Django 只要有 ``SELECT`` 、 ``INSERT`` 、 ``UPDATE`` 和 ``DELETE`` 权限就可以
了。在一些数据库中， Django 在执行 ``syncdb`` 时需要 ``ALTER TABLE`` 权限，但是
创建完表以后就不需要了。

如果你使用 Django 的 :ref:`测试框架<topics-testing>` 来测试数据库查询，那么
Django 需要创建测试数据库的权限。

.. _PostgreSQL: http://www.postgresql.org/
.. _MySQL: http://www.mysql.com/
.. _Django's ticket system: http://code.djangoproject.com/report/1
.. _psycopg: http://initd.org/pub/software/psycopg/
.. _编辑好的 Windows 版本: http://stickpeople.com/projects/python/win-psycopg/
.. _MySQLdb: http://sourceforge.net/projects/mysql-python
.. _SQLite: http://www.sqlite.org/
.. _pysqlite: http://pysqlite.org/
.. _cx_Oracle: http://cx-oracle.sourceforge.net/
.. _Oracle: http://www.oracle.com/
.. _Sybase SQL Anywhere: http://code.google.com/p/sqlany-django/
.. _IBM DB2: http://code.google.com/p/ibm-db/
.. _Microsoft SQL Server 2005: http://code.google.com/p/django-mssql/
.. _Firebird: http://code.google.com/p/django-firebird/
.. _ODBC: http://code.google.com/p/django-pyodbc/
.. _removing-old-versions-of-django:

删除任何旧版本的 Django
=================================

如果你是升级 Django ，那么安装前应当先删除旧版本的 Django 。

如果你以前使用 ``setup.py install`` 安装 Django ，那么删除旧版本就非常简单——
只要删除你的 Python 目录下 ``site-packages`` 中的 ``django`` 目录就可以了。

如果你是以 Python egg 方式安装的 Django ，那么请删除 Django 的 ``.egg`` 文件，
并移除 ``easy-install.pth`` 文件中相应的 egg 引用。这个文件同样在你的
``site-packages`` 目录中。

.. admonition:: 我的 ``site-packages`` 在哪里？

    ``site-packages`` 目录的位置根据操作系统的不同而不同。它位于 Python 的安装
    目录下。以下命令可以找到你的 ``site-packages`` 目录位置

    .. code-block:: bash

        python -c "from distutils.sysconfig import get_python_lib; print get_python_lib()"

    （注意，这个命令应当在终端命令行下执行，而不是在一个 Python 交互命令行下
    执行。）

.. _install-django-code:

安装 Django
===========

用于安装的 Django 代码一般有三种：特定发行包、最新官方包和最新开发版本。三种
代码的安装方法有少许不同。

但是，不管哪种都是容易安装的。

安装特定发行包
~~~~~~~~~~~~~~

请查看 :ref:`特定发行说明 <misc-distributions>` 中是否提供你的平台（发行版本）
下的官方 Django 包（安装器）。特定发行包通常会自动安装相关依赖的库并更新路径。

.. _installing-official-release:

安装官方发行版本
~~~~~~~~~~~~~~~~

    1. 从我们的 `下载页面`_ 下载最新版本。

    2. 解压缩下载的文件（文件名形如 ``tar xzvf Django-NNN.tar.gz`` ，其中的
       ``NNN`` 表示版本号）。你如果使用的操作系统是 windows ，那么你可以下载
       命令行工具 bsdtar_ 或使用 7-zip 之类的图形界面工具来解压缩文件。

    3. 进入上个步骤所创建的目录（如 ``cd Django-NNN`` ）。

    4. 如果你使用的是 Linux 、 Mac OS X 或其他类 Unix 操作系统，那么在终端中
       输入命令： ``sudo python setup.py install`` 。如果你使用的是 Windows
       操作系统，那么以管理员身份打开的一个命令窗口，运行 ``setup.py install`` 。

以上命令会把 Django 安装到你的 Python 安装目录中的 ``site-packages`` 目录中。

.. _bsdtar: http://gnuwin32.sourceforge.net/packages/bsdtar.htm
.. _7-zip: http://www.7-zip.org/

.. _installing-development-version:

安装最新开发版本
~~~~~~~~~~~~~~~~

.. admonition:: 追踪 Django 开发

    如果你决定使用 Django 的最新开发版本，那么你需要关心 `开发进度`_ 和 `向后
    兼容变化列表` 。这样你才能掌握最新的功能和升级时变动相应的代码。（对于官方
    发行版本来说，所有必要的内容都写在发行说明中。）

.. _开发进度: http://code.djangoproject.com/timeline
.. _向后兼容变化列表: http://code.djangoproject.com/wiki/BackwardsIncompatibleChanges

如果你想因为缺陷改进和功能提升而升级你的 Django ，可按以下步骤操作：

1. 确认你已经安装了 Subversion_ ，并且可以在命令行下运行。（在命令行下运行
   ``svn help`` 可以测试这个。）

2. 通过如下命令检出 Django 的主开发分支（ 'trunk' ）：

   .. code-block:: bash

       svn co http://code.djangoproject.com/svn/django/trunk/ django-trunk

3. 接下来，确认 Python 解释器可以载入 Django 代码。操作的方法有很多种，在
   Linux 、Mac OSX 或类 Unix 系统下最方便方法是使用符号链接：

   .. code-block:: bash

       ln -s `pwd`/django-trunk/django SITE-PACKAGES-DIR/django

   （在上面的命令中，把 ``SITE-PACKAGES-DIR`` 替换为你系统的 ``site-packages``
   目录，即前文“我的 ``site-packages`` 在哪里？”一节中提到的目录。）

   或者你也可以在你的 ``PYTHONPATH`` 环境变量中加入你的  ``django-trunk`` 目录。
   这可以是 Windows 系统下最方便的方法，因为 Windows 系统不支持符号链接。（环境
   变更可以在 Windos 系统的 `控制面板`_ 中定义。）

   .. admonition:: What about Apache and mod_python?

      If you take the approach of setting ``PYTHONPATH``, you'll need to
      remember to do the same thing in your Apache configuration once you
      deploy your production site. Do this by setting ``PythonPath`` in your
      Apache configuration file.

      More information about deployment is available, of course, in our
      :ref:`How to use Django with mod_python <howto-deployment-modpython>`
      documentation.

4. On Unix-like systems, create a symbolic link to the file
   ``django-trunk/django/bin/django-admin.py`` in a directory on your system
   path, such as ``/usr/local/bin``. For example:

   .. code-block:: bash

       ln -s `pwd`/django-trunk/django/bin/django-admin.py /usr/local/bin

   This simply lets you type ``django-admin.py`` from within any directory,
   rather than having to qualify the command with the full path to the file.

   On Windows systems, the same result can be achieved by copying the file
   ``django-trunk/django/bin/django-admin.py`` to somewhere on your system
   path, for example ``C:\Python24\Scripts``.

You *don't* have to run ``python setup.py install``, because you've already
carried out the equivalent actions in steps 3 and 4.

When you want to update your copy of the Django source code, just run the
command ``svn update`` from within the ``django-trunk`` directory. When you do
this, Subversion will automatically download any changes.

.. _`download page`: http://www.djangoproject.com/download/
.. _Subversion: http://subversion.tigris.org/
.. _from the Control Panel: http://www.microsoft.com/resources/documentation/windows/xp/all/proddocs/en-us/sysdm_advancd_environmnt_addchange_variable.mspx
