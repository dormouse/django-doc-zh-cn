.. _topics-install:

=====================
如何安装 Django
=====================

本文档会指导你安装 Django 。

安装 Python
==============

作为一个 Python 的 Web 框架， 使用 Django 前需要先安装 Python 。 

在 Python 2.3 至 2.6 版本下，Django 都可以使用。（由于 Python 3.0 是不向后兼容
的，所以 Django 目前无法在 Python 3.0 下使用；更多关于支持的 Python 版本和 3.0
迁移的内容，参见 :ref:`the Django FAQ <faq-install>` 。）

在 http://www.python.org 可以得到 Python 。如果你的操作系统是 Linux 或
Mac OS X ，那么可能 Python 已经安装在系统中了。

.. admonition:: Django on Jython

    如果你使用 Jython_ （一个 Java 平台上的 Python 实现），你将要做一些额外的
    步骤。详见 :ref:`howto-jython` 。

.. _jython: http://jython.org/

安装 Apache 和 mod_wsgi
=============================

如果你只是想体验一下 Django ，那么请跳过本节直接阅读下一节。因为 Django 本身
包含一个可用于测试的轻型 Web 服务器，所以在你要把 Django 部署到生产环境之前你
不需要安装 Apache 。

如果你想在生产环境下使用 Django ，那么请使用带有 `mod_wsgi`_ 的  Apache 。
mod_wsgi 与  mod_perl 类似，它把 Python 嵌入 Apache 并且在服务器启动时把
Python 代码载入内存。在 Apache 进程的生存周期内，代码始终留在内存内，相比其他
方式，这样可以获得显著的性能提升。请确保 Apache 已安装，并且 mod_wsgi 模块是
可用的。 Django 可以在支持 mod_wsgi 的任何版本 Apache 下工作。

安装完 mod_wsgi 后如何配置 mod_wsgi ，请参考 
See :ref:`如果通过 mod_wsgi 使用 Django <howto-deployment-modwsgi>` 。

如果因为某种原因你无法使用 mod_wsgi ，不用担心。 Django 支持其他多种部署方式。
最好的第二选择是使用 mod_wsgi 的前身 :ref:`mod_python
<howto-deployment-modpython>` 。另外 Django 遵循 WSGI_ 标准，可以运行于多种不同
的服务器平台。相应平台的安装方法参见 `不同平台安装维基页面`_ 。

.. _Apache: http://httpd.apache.org/
.. _mod_wsgi: http://code.google.com/p/modwsgi/
.. _WSGI: http://www.python.org/peps/pep-0333.html
.. _`不同平台安装维基页面`: http://code.djangoproject.com/wiki/ServerArrangements

.. _database-installation:

让你的数据库运行起来
=========================

如果你要使用 Django 数据库 API ，那么先要让你的数据库运行起来。 Django 支持
多种不同的数据库并且官方支持 PostgreSQL_ 、 MySQL_ 、 Oracle_ 和 SQLite_ 
（虽然  SQLite 不需要运行一个独立的服务）。

除了官方支持的数据库外，还有一些可通过第三方软件支持的数据库：

* `Sybase SQL Anywhere`_
* `IBM DB2`_
* `Microsoft SQL Server 2005`_
* Firebird_
* ODBC_

但是这些第三方支持的 Django 的版本和 ORM 功能差别很大。如果你对这些第三方支持的
功能或品质有疑问的话，请直接向这些第三方项目提问。

所了让数据库运行外，你还要确定安装好这些数据库相应的 Python 库。

* 如果你使用 PostgreSQL ，你需要 psycopg_ 包。 Django 既支持版本 1 也支持版本
  2 。（当你定义 Django 的数据库层时，可以定义 ``postgresql`` [用于版本 1 ]，
  也可以定义 ``postgresql_psycopg2`` [用于版本 2] 。）

  如果你使用 Windows ，可以试试非官方的 `编辑好的 Windows 版本`_ 。

* 如果你使用 MySQL ，你需要 1.2.1p2 或更高版本的 MySQLdb_ 。同时你还要读一下
  关于, :ref:`MySQL 数据库 <ref-databases>` 的注意事项。

* 如果你使用 SQLite 并且使用 Python 2.3 或者 Python 2.4 ，你需要 2.0.3 或更高
  版本的 pysqlite_ 。 Python 2.5 把 SQLite 作为标准模块内置了，所以就不需要安装
  其他额外的东西了。请参阅 SQLite 数据库 :ref:`注意事事项<sqlite-notes>` 。

* 如果你使用 Oracle ，你需要 cx_Oracle_ 。但请先阅读, :ref:`Oracle 数据库
  <oracle-notes>` 的注意事项，重点了解支持的 Oracle 和 ``cx_Oracle`` 的版本。

* 如果你使用一个非官方支持的数据库，请阅读相关文档，了解额外的需求。

如果你计划使用 Django 的 ``manage.py syncdb`` 命令来自动创建数据库的表，请先
确定在你的数据库中 Django 拥有创建和改变表的权限。如果你计划手动创建表，那么
Django 只要有 ``SELECT`` 、 ``INSERT`` 、 ``UPDATE`` 和 ``DELETE`` 权限就可以
了。在一些数据库中， Django 在执行 ``syncdb`` 时需要 ``ALTER TABLE`` 权限，但是
创建完表以后就不需要了。

如果你使用 Django 的 :ref:`测试框架<topics-testing>` 来测试数据库查询，那么
Django 需要创建测试数据库的权限。

.. _PostgreSQL: http://www.postgresql.org/
.. _MySQL: http://www.mysql.com/
.. _Django's ticket system: http://code.djangoproject.com/report/1
.. _psycopg: http://initd.org/pub/software/psycopg/
.. _编辑好的 Windows 版本: http://stickpeople.com/projects/python/win-psycopg/
.. _MySQLdb: http://sourceforge.net/projects/mysql-python
.. _SQLite: http://www.sqlite.org/
.. _pysqlite: http://pysqlite.org/
.. _cx_Oracle: http://cx-oracle.sourceforge.net/
.. _Oracle: http://www.oracle.com/
.. _Sybase SQL Anywhere: http://code.google.com/p/sqlany-django/
.. _IBM DB2: http://code.google.com/p/ibm-db/
.. _Microsoft SQL Server 2005: http://code.google.com/p/django-mssql/
.. _Firebird: http://code.google.com/p/django-firebird/
.. _ODBC: http://code.google.com/p/django-pyodbc/
.. _removing-old-versions-of-django:

删除任何旧版本的 Django
=================================

如果你是升级 Django ，那么安装前应当先删除旧版本的 Django 。

如果你以前使用 ``setup.py install`` 安装 Django ，那么删除旧版本就非常简单——
只要删除你的 Python 目录下 ``site-packages`` 中的 ``django`` 目录就可以了。

If you installed Django from a Python egg, remove the Django ``.egg`` file,
and remove the reference to the egg in the file named ``easy-install.pth``.
This file should also be located in your ``site-packages`` directory.

.. admonition:: Where are my ``site-packages`` stored?

    The location of the ``site-packages`` directory depends on the operating
    system, and the location in which Python was installed. To find out your
    system's ``site-packages`` location, execute the following:

    .. code-block:: bash

        python -c "from distutils.sysconfig import get_python_lib; print get_python_lib()"

    (Note that this should be run from a shell prompt, not a Python interactive
    prompt.)

.. _install-django-code:

Install the Django code
=======================

Installation instructions are slightly different depending on whether you're
installing a distribution-specific package, downloading the latest official
release, or fetching the latest development version.

It's easy, no matter which way you choose.

Installing a distribution-specific package
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Check the :ref:`distribution specific notes <misc-distributions>` to see if your
platform/distribution provides official Django packages/installers.
Distribution-provided packages will typically allow for automatic installation
of dependencies and easy upgrade paths.

.. _installing-official-release:

Installing an official release
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    1. Download the latest release from our `download page`_.

    2. Untar the downloaded file (e.g. ``tar xzvf Django-NNN.tar.gz``,
       where ``NNN`` is the version number of the latest release).
       If you're using Windows, you can download the command-line tool
       bsdtar_ to do this, or you can use a GUI-based tool such as 7-zip_.

    3. Change into the directory created in step 2 (e.g. ``cd Django-NNN``).

    4. If you're using Linux, Mac OS X or some other flavor of Unix, enter
       the command ``sudo python setup.py install`` at the shell prompt.
       If you're using Windows, start up a command shell with administrator
       privileges and run the command ``setup.py install``.

These commands will install Django in your Python installation's
``site-packages`` directory.

.. _bsdtar: http://gnuwin32.sourceforge.net/packages/bsdtar.htm
.. _7-zip: http://www.7-zip.org/

.. _installing-development-version:

Installing the development version
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. admonition:: Tracking Django development

    If you decide to use the latest development version of Django,
    you'll want to pay close attention to `the development timeline`_,
    and you'll want to keep an eye on `the list of
    backwards-incompatible changes`_. This will help you stay on top
    of any new features you might want to use, as well as any changes
    you'll need to make to your code when updating your copy of Django.
    (For stable releases, any necessary changes are documented in the
    release notes.)

.. _the development timeline: http://code.djangoproject.com/timeline
.. _the list of backwards-incompatible changes: http://code.djangoproject.com/wiki/BackwardsIncompatibleChanges

If you'd like to be able to update your Django code occasionally with the
latest bug fixes and improvements, follow these instructions:

1. Make sure that you have Subversion_ installed, and that you can run its
   commands from a shell. (Enter ``svn help`` at a shell prompt to test
   this.)

2. Check out Django's main development branch (the 'trunk') like so:

   .. code-block:: bash

       svn co http://code.djangoproject.com/svn/django/trunk/ django-trunk

3. Next, make sure that the Python interpreter can load Django's code. There
   are various ways of accomplishing this.  One of the most convenient, on
   Linux, Mac OSX or other Unix-like systems, is to use a symbolic link:

   .. code-block:: bash

       ln -s `pwd`/django-trunk/django SITE-PACKAGES-DIR/django

   (In the above line, change ``SITE-PACKAGES-DIR`` to match the location of
   your system's ``site-packages`` directory, as explained in the
   "Where are my ``site-packages`` stored?" section above.)

   Alternatively, you can define your ``PYTHONPATH`` environment variable
   so that it includes the ``django-trunk`` directory. This is perhaps the
   most convenient solution on Windows systems, which don't support symbolic
   links. (Environment variables can be defined on Windows systems `from the
   Control Panel`_.)

   .. admonition:: What about Apache and mod_python?

      If you take the approach of setting ``PYTHONPATH``, you'll need to
      remember to do the same thing in your Apache configuration once you
      deploy your production site. Do this by setting ``PythonPath`` in your
      Apache configuration file.

      More information about deployment is available, of course, in our
      :ref:`How to use Django with mod_python <howto-deployment-modpython>`
      documentation.

4. On Unix-like systems, create a symbolic link to the file
   ``django-trunk/django/bin/django-admin.py`` in a directory on your system
   path, such as ``/usr/local/bin``. For example:

   .. code-block:: bash

       ln -s `pwd`/django-trunk/django/bin/django-admin.py /usr/local/bin

   This simply lets you type ``django-admin.py`` from within any directory,
   rather than having to qualify the command with the full path to the file.

   On Windows systems, the same result can be achieved by copying the file
   ``django-trunk/django/bin/django-admin.py`` to somewhere on your system
   path, for example ``C:\Python24\Scripts``.

You *don't* have to run ``python setup.py install``, because you've already
carried out the equivalent actions in steps 3 and 4.

When you want to update your copy of the Django source code, just run the
command ``svn update`` from within the ``django-trunk`` directory. When you do
this, Subversion will automatically download any changes.

.. _`download page`: http://www.djangoproject.com/download/
.. _Subversion: http://subversion.tigris.org/
.. _from the Control Panel: http://www.microsoft.com/resources/documentation/windows/xp/all/proddocs/en-us/sysdm_advancd_environmnt_addchange_variable.mspx
