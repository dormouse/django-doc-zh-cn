.. _intro-overview:

==================
Django 概述
==================

因为 Django 最初的开发目的是用于快节奏的新闻编辑部的，所以它的初衷是快速地、
方便地进行 Web 开发。本文旨在概述如何使用 Django 开发数据库驱动的 Web 程序。

本文只是一个引子，可以帮助你理解 Django 是如何工作的，但是不是教程或手册。如果
你真正要开发一个项目，你应当更进一步阅读
:ref:`新手教程 <intro-tutorial01>` 或 :ref:`更详细的文档 <topics-index>` 。

设计你的模型
============

你可以使用 Django 编写不使用数据库的程序。如果你编写使用数据库的程序，那么
Django 可以用 Pythn 代码描述数据库的结构和关系映射。

:ref:`数据-模型语法 <topics-db-models>` 提供多种方法来表示你的模型。这种语法
解决了困扰了两之久的数据库描述问题。下面是个简单的例子::

    class Reporter(models.Model):
        full_name = models.CharField(max_length=70)

        def __unicode__(self):
            return self.full_name

    class Article(models.Model):
        pub_date = models.DateTimeField()
        headline = models.CharField(max_length=200)
        content = models.TextField()
        reporter = models.ForeignKey(Reporter)

        def __unicode__(self):
            return self.headline

安装模型
========

接下来，运行 Django 命令行工具，自动创建数据库的表：

.. code-block:: bash

    manage.py syncdb

:djadmin:`syncdb` 命令搜索所有的模型，并根据模型创建数据库中还没有创建的表。

享受自由的 API
==============

这样，你已经得到了一个自由的、功能丰富的、可以处理你的数据
:ref:`Python API <topics-db-queries>` 。这些 API 是即时生成的，不需要编写任何
代码::

    >>> from mysite.models import Reporter, Article

    # 系统中还没有记者。
    >>> Reporter.objects.all()
    []

    # 新建一个记者。
    >>> r = Reporter(full_name='John Smith')

    # 在数据库中保存数据。必须显示地调用 save() 。
    >>> r.save()

    # 现在有了一个 ID 。
    >>> r.id
    1

    # 现在数据库有了一个记者。
    >>> Reporter.objects.all()
    [<Reporter: John Smith>]

    # Python 对象的属性的值就是数据库中对应字段的值。
    >>> r.full_name
    'John Smith'

    # Django 提供丰富的数据库查询 API 。
    >>> Reporter.objects.get(id=1)
    <Reporter: John Smith>
    >>> Reporter.objects.get(full_name__startswith='John')
    <Reporter: John Smith>
    >>> Reporter.objects.get(full_name__contains='mith')
    <Reporter: John Smith>
    >>> Reporter.objects.get(id=2)
    Traceback (most recent call last):
        ...
    DoesNotExist: Reporter matching query does not exist.

    # 创建一篇稿件。
    >>> from datetime import datetime
    >>> a = Article(pub_date=datetime.now(), headline='Django is cool',
    ...     content='Yeah.', reporter=r)
    >>> a.save()

    # 现在稿件已保存在数据库中了。
    >>> Article.objects.all()
    [<Article: Django is cool>]

    # 通过稿件对象可以引用记者对象。
    >>> r = a.reporter
    >>> r.full_name
    'John Smith'

    # 反之亦然：通过记者对象也可以引用稿件对象。
    >>> r.article_set.all()
    [<Article: Django is cool>]

    # API 可以顺者对象之间的关系进一步深入，这在后台实质是使用数据库的 JOIN 
    # 语法。如下可以查找全名以 "John" 开头的记者。
    >>> Article.objects.filter(reporter__full_name__startswith="John")
    [<Article: Django is cool>]

    # 改变对象属性的值并使用 save() 保存，就可以改变数据库中的字段值。
    >>> r.full_name = 'Billy Goat'
    >>> r.save()

    # 使用 delete() 删除对象。
    >>> r.delete()

一个动态站点管理接口：不只是一个脚手架，而是一栋完整的房子
==========================================================

一旦你定义好了模型， Django 就可以根据模型自动生成一个专业的、可正式使用的
:ref:`管理界面 <ref-contrib-admin>` -- 一个可以让经过认证的用户增删改数据的
网站。把你的模型注册到管理站点是非常容易的::

    # 在 models.py 中 ...

    from django.db import models

    class Article(models.Model):
        pub_date = models.DateTimeField()
        headline = models.CharField(max_length=200)
        content = models.TextField()
        reporter = models.ForeignKey(Reporter)


    # 在同一目录下的 admin.py 中 ...

    import models
    from django.contrib import admin

    admin.site.register(models.Article)

本例的原则是你的站点内容由你的雇员、客户或你本人编辑，而你不必处理后台数据库
接口，只要关注内容管理就可以了。

创建 Django 程序的典型工作流程是先创建模型，接着尽可能快地生成管理站点并上线
运行，以便你的雇员或客户开始写入数据。然后再编写展示数据给公众的程序。

设计你的 URL
============

一个简洁、优雅的 URL 设计对于高质量的 Web 程序是一个重要的细节。 Django 鼓励
漂亮的 URL 设计，反对烦杂的 URL ，例如在 URL 中出现 ``.php`` 或 ``.asp`` 。

要为一个程序设计 URL ，就要创建一个名为 :ref:`URLconf
<topics-http-urls>` 的 Python 模块。这个模块就像一个目录，包含 URL 与 Python
回调函数之间的映射关系。URLconfs 也用于从 Python 中解耦 URL 。

本例中的 URLconf 如下::

    from django.conf.urls.defaults import *

    urlpatterns = patterns('',
        (r'^articles/(\d{4})/$', 'mysite.views.year_archive'),
        (r'^articles/(\d{4})/(\d{2})/$', 'mysite.views.month_archive'),
        (r'^articles/(\d{4})/(\d{2})/(\d+)/$', 'mysite.views.article_detail'),
    )

上面的例子中，把正则表达式形式的 URL 样本与 Python 回调函数（“视图”）进行了
映射。正则表达式中使用圆括号来“捕获” URL 中的参数值。当用户请求一个页面时，
Django 就会按顺序搜索这些 URL 样本，直到找到第一个匹配的样本为止。如果找不到，
就会调用指定的 404 视图。这个匹配过程是非常快的，因为在载入的时间会编译这些
正则表达式。

一旦找到一个匹配的样本， Django 就会导入并调用给定的视图（一个简单的 Python
函数）。视图会接收到一个包含元数据的请求对象和通过正则表达式捕获的值。

例如，如果用户请求 URL "/articles/2005/05/39323/", Django
就会调用函数 ``mysite.views.article_detail(request, '2005', '05', '39323')`` 。

编写你的视图
============

每个视图都只做两件中一件：要么返回一个包含请求结果的页面的
:class:`~django.http.HttpResponse` 对象，要么抛出一个异常,如
:class:`~django.http.Http404` 。至于其他就看你自己了。

通常，一个视图的工作流程是：接收数据，载入模板，渲染模板。下面是一个“按年归档”
的例子::

    def year_archive(request, year):
        a_list = Article.objects.filter(pub_date__year=year)
        return render_to_response('news/year_archive.html', {'year': year, 'article_list': a_list})

这个例子使用了 Django 的 :ref:`模板系统 <topics-templates>` 。模板系统功能强大，
但是简单易用，甚至不会编程的人也会使用。

设计你的模板
============

上面的例子中载入了 ``news/year_archive.html`` 模板。

在 Django 中，可以在设置文件中定义模板的搜索路径以优化模板文件的查找。 Django
会按设置文件中给出的路径依次查找模板文件。

假设我们已经找到了 ``news/article_detail.html`` 模板，模板内容如下：

.. code-block:: html+django

    {% extends "base.html" %}

    {% block title %}Articles for {{ year }}{% endblock %}

    {% block content %}
    <h1>Articles for {{ year }}</h1>

    {% for article in article_list %}
        <p>{{ article.headline }}</p>
        <p>By {{ article.reporter.full_name }}</p>
        <p>Published {{ article.pub_date|date:"F j, Y" }}</p>
    {% endfor %}
    {% endblock %}

模板中的变量都使用双花括号包围。 ``{{ article.headline }}`` 表示“输出
article 的 headline 属性。但是点符号不仅用于表示属性，还用于表示字典的键值、
索引和函数调用。

注意， ``{{ article.pub_date|date:"F j, Y" }}`` 中使用了 Unix 型的“管道”
（ Unix 中用“ | ”符号表示管道）。这里被称为模板过滤器。这是一种过滤变量的方式。
本例中， Python 的日期时间对象被过滤成了指定的格式。（在 PHP 中用日期函数实现
这种变换，是的， PHP 没有 Django 这种优秀的方式）。

你可以无限制地使用多种过滤器，还可以定制自己的过滤器。你可以定制自己的模板标
记，在后台执行自定义的 Python 代码。

``{% extends "base.html" %}`` 使用了 Django 中的“模板继承”概念。即“首先载入
名为‘ base ’的模板的内容，然后再处理本模板中的其余内容。”简而言之，模板继承
可以使用模板显著地缩短，因为你可以把模板中重复的内容归纳到一个文件中。

下面是 "base.html" 模板的内容：

.. code-block:: html+django

    <html>
    <head>
        <title>{% block title %}{% endblock %}</title>
    </head>
    <body>
        <img src="sitelogo.gif" alt="Logo" />
        {% block content %}{% endblock %}
    </body>
    </html>

模板内容相当清晰。例子模板定义了整个站点的外观（包括站点的 logo ），并留下了
一个“洞”，等待子模板来填充。这种做法使站点的重新设计变得非常方便，只要改动
``base.html`` 这一个文件就可以了。

这种做法还有一个好处：可以保持子模板不变，而方便地创建不同版本的站点。 Django
的创建者已经使用这项技术创建了因手机号码不同而产生的不同版本站点，而所做的工作
只是创建新的基础模板而已。

注意，如果你喜欢其他模板系统，那么你不必一定要使用 Django 的模板系统。虽然
Django 的模板系统非常适合 Django 的模型，但这不是必须的。同理，你也不必强迫
使用 Django 的数据库 API 。你可以使用其他数据库抽象工具、可以读取 XML 文件、
可以读取磁盘上的文件或者其他任何方法来操作数据库。 Django 的每个组成部分：
模型、视图和模板都可以解耦，以后会谈到。

这仅仅是一点皮毛
================

本文只是 Django 功能的一个快速概览。以下一些更有用的功能：

    * 可以结合 memcached 或 其他后台缓存的 :ref:`缓存框架 <topics-cache>` 。

    * 可以创建 RSS 和 Atom 种子的 :ref:`聚合框架 <ref-contrib-syndication>` 。
      使用这个框架如同写一个小小的 Python 类一样容易。

    * 更性感的自动创建管理站点功能。本文中的例子已经可以搭建出一个管理站点的
      骨架了。

显然，下一步你应该 `下载 Django`_ ，阅读 :ref:`教程 <intro-tutorial01>` 并加入
`社区`_ 。非常感谢。

.. _下载 Django: http://www.djangoproject.com/download/
.. _社区: http://www.djangoproject.com/community/
