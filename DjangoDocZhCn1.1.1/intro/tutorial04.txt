.. _intro-tutorial04:

=====================================
编写你的第一个 Django 程序，第四部分
=====================================

本文继续 :ref:`教程第三部分 <intro-tutorial03>` 讨论的内容。我们会继续开发网络
投票程序并将重点研究简单的表单处理和缩减代码。

编写一个简单的表单
===================

现在把教程第三部分中提到的 ``polls/detail.html`` 升级一下，在模板代码中加入
``<form>`` 标签：

.. code-block:: html+django

    <h1>{{ poll.question }}</h1>

    {% if error_message %}<p><strong>{{ error_message }}</strong></p>{% endif %}

    <form action="/polls/{{ poll.id }}/vote/" method="post">
    {% for choice in poll.choice_set.all %}
        <input type="radio" name="choice" id="choice{{ forloop.counter }}" value="{{ choice.id }}" />
        <label for="choice{{ forloop.counter }}">{{ choice.choice }}</label><br />
    {% endfor %}
    <input type="submit" value="Vote" />
    </form>

总结一下：

    * 上面的模板会给每个投票选择项设置一个收音机按钮。每个收音机按钮的值对应
      Choice 对象的 ID 字段值，名称对应 Choice 对象的 choice 字段。也就是说，当
      有人点选了收音机按钮并提交时，浏览器会提交表单，提交的 POST 数据为
      ``choice=3`` 。这就是HTML的基本法则。

    * 这里我们设置了 ``action="/polls/{{ poll.id }}/vote/" method="post"`` 。
      因为提交表单的动作会改变服务器端的数据，所以使用 post （而不使用 get ）
      是非常重要的。这个技巧不只针对 Django 开发，而且通用于所有 Web 开发。

    * ``forloog.counter`` 表明 :ttag:`for` 标记循环了多少次。


现在创建一个 Django 视图来处理提交的数据。在教程第三部分中，我们的 
URLconf 设置有下面的内容::

    (r'^(?P<poll_id>\d+)/vote/$', 'vote'),

现在我们在 ``mysite/polls/views.py`` 中创建 ``vote()`` 视图::

    from django.shortcuts import get_object_or_404, render_to_response
    from django.http import HttpResponseRedirect
    from django.core.urlresolvers import reverse
    from mysite.polls.models import Choice, Poll
    # ...
    def vote(request, poll_id):
        p = get_object_or_404(Poll, pk=poll_id)
        try:
            selected_choice = p.choice_set.get(pk=request.POST['choice'])
        except (KeyError, Choice.DoesNotExist):
            # Redisplay the poll voting form.
            return render_to_response('polls/detail.html', {
                'poll': p,
                'error_message': "You didn't select a choice.",
            })
        else:
            selected_choice.votes += 1
            selected_choice.save()
            # Always return an HttpResponseRedirect after successfully dealing
            # with POST data. This prevents data from being posted twice if a
            # user hits the Back button.
            return HttpResponseRedirect(reverse('mysite.polls.views.results', args=(p.id,)))

这段代码有些内容我们目前还没有提及到：

    * :attr:`request.POST <django.http.HttpRequest.POST>` 是一个类似于字典的
      对象，你可以通过关键字索引来引用提交的数据。这种情况下，
      ``request.POST['choice']`` 会以字符串的形式返回被选中的投票选项的 ID 。
      :attr:`request.POST <django.http.HttpRequest.POST>` 的值永远都是字符串。
      
      注意，Django 也提供  :attr:`request.GET <django.http.HttpRequest.GET>` ，
      可以用同样的方法获取GET数据。但是在这里我们使用 :attr:`request.POST
      <django.http.HttpRequest.POST>` ，以保证数据是从 POST 方法提交过来的。

    * 如果 ``choice`` 在 POST 数据中不存在，调用``request.POST['choice']`` 就会
      引发 :exc:`KeyError` 异常。上面的代码会检查是否触发 :exc:`KeyError`
      异常，如果有异常就会重新显示提交表单和一段报错信息。

    * 在增加了投票选择项的计数之后，最后返回了
      :class:`~django.http.HttpResponseRedirect` 对象而不是通常的
      :class:`~django.http.HttpResponse` 。
      :class:`~django.http.HttpResponseRedirect` 对象只接收一个参数：重定向
      URL 。（下面会说明怎么样构建这种 URL ）。
      
      上面代码的注释里说明，你必须在成功处理完 POST 数据之后总是返回一个
      :class:`~django.http.HttpResponseRedirect` 对象。这个技巧不仅仅适用于
      Django ，这是一个良好的 Web 开发习惯。

    * 在这个例子中我们在构造
      :class:`~django.http.HttpResponseRedirect` 对象时使用了
      :func:`~django.core.urlresolvers.reverse` 函数。这个函数解决了在视图中
      硬编码 URL 问题。我们只要给出要重定向的视图的名称和这个视图需要的参数就
      可以了。在本例中，根据教程第三部分的 URLconf 设置，
      :func:`~django.core.urlresolvers.reverse` 会返回下面的字符串::

        '/polls/3/results/'

      ... 这里的 ``3`` 就是 ``p.id`` 的值。重定向 URL 会调用 ``results`` 视图来
      显示最终的页面。在这里你要使用视图的全名（包括前缀）。

在第三部分中提到， ``request`` 是一个
:func:`~django.core.urlresolvers.reverse` 对象。要了解
:func:`~django.core.urlresolvers.reverse` 的更多内容，请参考
:ref:`request and response documentation <ref-request-response>` 。

当提交投票之后， ``vote()`` 视图会重定向到该投票的投票结果页面。
现在来编写投票结果页面的视图::

    def results(request, poll_id):
        p = get_object_or_404(Poll, pk=poll_id)
        return render_to_response('polls/results.html', {'poll': p})

这基本上和 :ref:`教程第三部分 <intro-tutorial03>` 中的 ``detail()`` 视图
一模一样。唯一的区别就是模板名称不同。在后面我们会解决这个问题。

现在创建一个 ``results.html`` 模板：

.. code-block:: html+django

    <h1>{{ poll.question }}</h1>

    <ul>
    {% for choice in poll.choice_set.all %}
        <li>{{ choice.choice }} -- {{ choice.votes }} vote{{ choice.votes|pluralize }}</li>
    {% endfor %}
    </ul>

现在，在浏览器中访问 ``/polls/1/`` 并完成投票，你就能看到结果页面了，每次投票后
都能看到数据有所更新。如果没有点选任何一个选择项，那么你会看到错误信息。

使用通用视图：代码越简洁越好
============================

``detail()`` （来自 :ref:`教程第三部分 <intro-tutorial03>` ）和 ``results()``
都太简单了，而且代码上也有重复。显示投票列表的 ``index()`` （同样来自教程第三
部分）也有类似的问题。

这些视图反映了 Web 开发中的基本流程：根据 URL 中的参数从数据库中获取数据，加载
模板并返回渲染后的内容。因为这种流程太普遍了，因此 Django 提供了快捷方法，称之
为“通用视图”系统。

通用视图对通用模式进行了概括，所以你甚至不需要写任何 Python 代码就可以完成任务。

现在用通用视图系统来修改投票程序，我们可以删除大量自己的代码。转换工作只需以下
几步：

    1. 转换 URLconf 。

    2. 重命名一些模板。

    3. 删除一些旧的，不再需要的视图。

    4. 根据新的视图调整 URL。

详情下面分解。

.. admonition:: 为什么要梳理代码？

    一般，编写 Django 程序时，你需要估计一下使用通用视图是否适合你的系统。
    如果适合，那从一开始就应该使用通用视图而不是开发了一半再来重写代码。但是
    本文有意从一开始就介绍自行编写视图的方法，是为了让读者理解核心内容。
    
    这好比在使用计算器之前你应当掌握基本的数学知识。

首先，打开 ``polls/urls.py`` ，其中的 URLconf 如下所示::

    from django.conf.urls.defaults import *

    urlpatterns = patterns('mysite.polls.views',
        (r'^$', 'index'),
        (r'^(?P<poll_id>\d+)/$', 'detail'),
        (r'^(?P<poll_id>\d+)/results/$', 'results'),
        (r'^(?P<poll_id>\d+)/vote/$', 'vote'),
    )

将代码改成下面的样子::

    from django.conf.urls.defaults import *
    from mysite.polls.models import Poll

    info_dict = {
        'queryset': Poll.objects.all(),
    }

    urlpatterns = patterns('',
        (r'^$', 'django.views.generic.list_detail.object_list', info_dict),
        (r'^(?P<object_id>\d+)/$',
            'django.views.generic.list_detail.object_detail',
            info_dict),
        url(r'^(?P<object_id>\d+)/results/$',
            'django.views.generic.list_detail.object_detail',
            dict(info_dict, template_name='polls/results.html'),
            'poll_results'),
        (r'^(?P<poll_id>\d+)/vote/$', 'mysite.polls.views.vote'),
    )

我们这里用了两个通用视图：
:func:`~django.views.generic.list_detail.object_list` 和
:func:`~django.views.generic.list_detail.object_detail` 。这两个视图分别用于
显示对象列表和特定对象的内容。

    * 每个通用视图都需要知道处理哪些数据。这些数据通过一个字典类型对象提供。
      上例中的 ``queryset`` 指向的的数据就是通用视图要处理的对象。

    * :func:`~django.views.generic.list_detail.object_detail` 通用视图需要一个
      从 URL 中捕获的 ID 值，名称限定为 ``"object_id"`` 。所以我们把
      ``poll_id`` 改成了 ``object_id`` 。

    * 在 results 视图里我们加上了一个 ``poll_results`` 参数，这样就能在以后引用
      它的 URL 了（参见 :ref:`命名 URL 样式 <naming-url-patterns>` 文档）。我们
      还使用了 :mod:`django.conf.urls.defaults` 中的
      :func:`~django.conf.urls.default.url` 。当我们以这种方式提供 URL 样式时，
      使用 :func:`~django.conf.urls.default.url` 是一个好习惯。

缺省情况下， :func:`~django.views.generic.list_detail.object_detail` 视图使用
名为 ``<app name>/<model name>_detail.html`` 的模板。因此，在我们的例子中就应当
使用的是名为 ``polls/poll_detail.html`` 的模板。所以，把 ``polls/detail.html``
更名为 ``polls/poll_detail.html`` ，然后在 ``vote()`` 中修改
:func:`~django.shortcuts.render_to_response` 这一行。

同理， :func:`~django.views.generic.list_detail.object_list` 通用视图使用名为
``<app name>/<model name>_list.html`` 的模板。所以，把 ``polls/index.html``更名
为 ``polls/poll_list.html`` 。

由于在这个投票程序中的 URLconf 设置里，有多个纪录都用到了
:func:`~django.views.generic.list_detail.object_detail` 视图，所以我们要手工给
results 视图指定名为 ``template_name='polls/results.html'`` 的模板。否则，这些
这些通用视图就会使用同一个模板。注意这里我们用 ``dict()`` 来返回一个新的字典。

.. note:: :meth:`django.db.models.QuerySet.all` 是惰性的。

    在 detail 视图中只需要使用一条 ``Poll`` 对象，而在这里使用
    ``Poll.objects.all()`` 方法可能让人觉得有点恐怖。但是，不用担心，
    ``Poll.objects.all()`` 实际上是一个特殊的
    :class:`~django.db.models.QuerySet` 对象，这个对象是惰性的，只有在真正必要
    的时候才会去访问数据库。在查询数据库时，
    :func:`~django.views.generic.list_detail.object_detail` 视图会将范围缩小到
    单个纪录，所以最终数据库中的查询只会返回一条纪录。
    
    如果你想知道这其中到底是怎么工作的，Django 数据库 API 文档会告诉你
    :ref:`QuerySet对象的懒惰特性 <querysets-are-lazy>` 。

在教程前面部分中，模板内都传入了一个包含 ``poll`` 和 ``latest_poll_list`` 
的 context 对象。但是通用视图提供 ``object`` 和 ``object_list`` 作为context
对象。所以，需要修改模板文件来适应新的 context 变量。在你的模板中，将所有
``latest_poll_list`` 替换为 ``object_list`` ，所有 ``poll`` 替换为
``object`` 。

你现在可以从 ``polls/views.py`` 中删除 ``index()`` 、 ``detail()`` 和
``result()`` 视图了。我们不再需要这些代码了，它们已经被通用视图代替了。

``vote()`` 视图还是需要的，但是要修改变量名。在
:func:`~django.shortcuts.render_to_response` 中，将 ``poll`` 重命名为
``object`` 。

最后一件要做的事就是根据通用视图调整 URL 的处理。在vote视图中，我们使用了
:func:`~django.core.urlresolvers.reverse` 函数来解决硬编码 URL 的问题。现在我们
使用了通用视图，需要修改:func:`~django.core.urlresolvers.reverse` 重新指向通用
视图。我们不能简单地再直接用视图的名称了，因为通用视图是可以而且应当多次使用的，
所以我们使用给定的名称::

    return HttpResponseRedirect(reverse('poll_results', args=(p.id,)))

重新启动测试服务器，看看这个使用了通用视图的全新程序。

要全面了解通用视图的详细内容，请参考 :ref:`通用视图文档
<topics-http-generic-views>` 。

敬请期待
========

由于时间关系，新手入门的文章就只能到这里了。将来的文档里会加入下面的内容：

    * 高级表单处理
    * 使用 RSS 组件
    * 使用缓存组件
    * 使用评论组件
    * 高级管理站点功能：权限
    * 高级管理站点功能：定制 JavaScript

接下来，你可能想看看 :ref:`接下来干什么 <intro-whatsnext>` 。
